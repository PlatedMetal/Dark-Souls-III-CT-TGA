/* This file was automatically generated from paramdef XMLs and game regulation data.*/
#ifndef _TGA_PARAMDEFS_H
#pragma once
#define _TGA_PARAMDEFS_H

#include <stdint.h>

typedef char s8;
typedef unsigned char u8;
typedef short s16;
typedef unsigned short u16;
typedef int s32;
typedef unsigned int u32;
typedef long long s64;
typedef unsigned long long u64;
typedef char fixstr;
typedef short fixstrW;
typedef float f32;
typedef double f64;
typedef unsigned char dummy8;

struct _ACTIONBUTTON_PARAM_ST {
	u8 regionType;
	dummy8 pad1[3];
	s32 dummyPoly1;
	s32 dummyPoly2;
	f32 Radius;
	s32 Angle;
	f32 depth;
	f32 width;
	f32 height;
	f32 baseHeightOffset;
	u8 angleCheckType;
	dummy8 pad2[3];
	s32 AllowAngle;
	u8 textBoxType;
	dummy8 pad3[3];
	s32 textId;
	s32 InvalidFlag;
	s32 grayoutFlag;
	s32 priority;
	f32 execInvalidTime;
	u8 execButtonCircle;
	dummy8 pad4[3];
};
typedef struct _ACTIONBUTTON_PARAM_ST ACTIONBUTTON_PARAM_ST;

struct _AI_SOUND_PARAM_ST {
	f32 Radius;
	f32 lifeFrame;
	u8 bSpEffectEnable;
	u8 Type;
	u8 fakeTargetType;
	u8 InterestCategory;
	u8 UseHitDamageTeam;
	dummy8 pad[19];
};
typedef struct _AI_SOUND_PARAM_ST AI_SOUND_PARAM_ST;

struct _ATK_PARAM_ST {
	f32 Hit0_Radius;
	f32 Hit1_Radius;
	f32 Hit2_Radius;
	f32 Hit3_Radius;
	f32 KnockbackDist;
	f32 HitStopTime;
	s32 spEffect0;
	s32 spEffect1;
	s32 spEffect2;
	s32 spEffect3;
	s32 spEffect4;
	s16 Hit0_DmyPoly1;
	s16 Hit1_DmyPoly1;
	s16 Hit2_DmyPoly1;
	s16 Hit3_DmyPoly1;
	s16 Hit0_DmyPoly2;
	s16 Hit1_DmyPoly2;
	s16 Hit2_DmyPoly2;
	s16 Hit3_DmyPoly2;
	s16 BlowingCorrection;
	s16 AtkPhysCorrection;
	s16 AtkMagCorrection;
	s16 AtkFireCorrection;
	s16 AtkThunCorrection;
	s16 AtkStamCorrection;
	s16 GuardAtkRateCorrection;
	s16 GuardBreakCorrection;
	s16 AtkThrowEscapeCorrection;
	s16 AtkSuperArmorCorrection;
	s16 AtkPhys;
	s16 AtkMag;
	s16 AtkFire;
	s16 AtkThun;
	s16 AtkStam;
	s16 GuardAtkRate;
	s16 GuardBreakRate;
	s16 AtkSuperArmor;
	s16 AtkThrowEscape;
	s16 AtkObj;
	s16 GuardStaminaCutRate;
	s16 GuardRate;
	s16 ThrowTypeID;
	u8 Hit0_hitType;
	u8 Hit1_hitType;
	u8 Hit2_hitType;
	u8 Hit3_hitType;
	u8 hit0_Priority;
	u8 hit1_Priority;
	u8 hit2_Priority;
	u8 hit3_Priority;
	u8 damageLevel;
	u8 mapHitType;
	u8 GuardCutCancelRate;
	s8 AtkAttribute;
	s8 spAttribute;
	s8 atkType;
	s8 atkMaterial;
	s8 atkSize;
	s8 DefMaterial;
	s8 DefSfxMaterial;
	u8 HitSourceType;
	u8 ThrowFlag;
	u8 disableGuard: 1;
	u8 disableStaminaAttack: 1;
	u8 disableHitSpEffect: 1;
	u8 IgnoreNotifyMissSwingForAI: 1;
	u8 repeatHitSfx: 1;
	u8 IsArrowAtk: 1;
	u8 IsGhostAtk: 1;
	u8 isDisableNoDamage: 1;
	u8 atkPowForSfxSe;
	u8 atkDirForSfxSe;
	u8 opposeTarget: 1;
	u8 friendlyTarget: 1;
	u8 selfTarget: 1;
	u8 isChargeAtk: 1;
	u8 isShareHitList: 1;
	u8 isCheckObjPenetration: 1;
	u8 unk81_1: 1;
	u8 unk81_2: 1;
	dummy8 pad1;
	u8 regainableSlotId;
	s32 deathCauseId;
	s32 decalId1;
	s32 decalId2;
	s32 spawnAiSoundId;
	s32 HitAiSoundId;
	s32 RumbleId0;
	s32 RumbleId1;
	s32 RumbleId2;
	s32 RumbleId3;
	s32 Hit0_VfxId;
	s32 Hit0_DummyPolyId0;
	s32 Hit0_DummyPolyId1;
	s32 Hit1_VfxId1;
	s32 Hit1_DummyPolyId0;
	s32 Hit1_DummyPolyId1;
	s32 Hit2_VfxId;
	s32 Hit2_DummyPolyId0;
	s32 Hit2_DummyPolyId1;
	s32 Hit3_VfxId;
	s32 Hit3_DummyPolyId0;
	s32 Hit3_DummyPolyId1;
	s32 Hit4_VfxId;
	s32 Hit4_DummyPolyId0;
	s32 Hit4_DummyPolyId1;
	s32 Hit5_VfxId;
	s32 Hit5_DummyPolyId0;
	s32 Hit5_DummyPolyId1;
	s32 Hit6_VfxId;
	s32 Hit6_DummyPolyId0;
	s32 Hit6_DummyPolyId1;
	s32 Hit7_VfxId;
	s32 Hit7_DummyPolyId0;
	s32 Hit7_DummyPolyId1;
	f32 Hit4_Radius;
	f32 Hit5_Radius;
	f32 Hit6_Radius;
	f32 Hit7_Radius;
	f32 Hit8_Radius;
	f32 Hit9_Radius;
	f32 Hit10_Radius;
	f32 Hit11_Radius;
	f32 Hit12_Radius;
	f32 Hit13_Radius;
	f32 Hit14_Radius;
	f32 Hit15_Radius;
	s16 Hit4_DmyPoly1;
	s16 Hit5_DmyPoly1;
	s16 Hit6_DmyPoly1;
	s16 Hit7_DmyPoly1;
	s16 Hit8_DmyPoly1;
	s16 Hit9_DmyPoly1;
	s16 Hit10_DmyPoly1;
	s16 Hit11_DmyPoly1;
	s16 Hit12_DmyPoly1;
	s16 Hit13_DmyPoly1;
	s16 Hit14_DmyPoly1;
	s16 Hit15_DmyPoly1;
	s16 Hit4_DmyPoly2;
	s16 Hit5_DmyPoly2;
	s16 Hit6_DmyPoly2;
	s16 Hit7_DmyPoly2;
	s16 Hit8_DmyPoly2;
	s16 Hit9_DmyPoly2;
	s16 Hit10_DmyPoly2;
	s16 Hit11_DmyPoly2;
	s16 Hit12_DmyPoly2;
	s16 Hit13_DmyPoly2;
	s16 Hit14_DmyPoly2;
	s16 Hit15_DmyPoly2;
	u8 Hit4_hitType;
	u8 Hit5_hitType;
	u8 Hit6_hitType;
	u8 Hit7_hitType;
	u8 Hit8_hitType;
	u8 Hit9_hitType;
	u8 Hit10_hitType;
	u8 Hit11_hitType;
	u8 Hit12_hitType;
	u8 Hit13_hitType;
	u8 Hit14_hitType;
	u8 Hit15_hitType;
	s32 unk174;
	s32 unk178;
	s32 unk17C;
	s16 defMaterialVal0;
	s16 defMaterialVal1;
	s16 defMaterialVal2;
	s16 atkDarkCorrection;
	s16 atkDark;
	u8 IsChargeAtk2: 1;
	u8 IsChargeAtk3: 1;
	u8 unk18A_0: 1;
	u8 unk18A_1: 1;
	u8 unk18A_2: 1;
	u8 unk18A_3: 1;
	u8 unk18A_4: 1;
	u8 unk18A_5: 1;
	u8 unk18B;
	s16 physSpCorrection;
	s16 magSpCorrection;
	s16 fireSpCorrection;
	s16 thunSpCorrection;
	u8 damageLevelParameter;
	u8 unk195;
	s16 darkSpCorrection;
	s32 atkElementCorrectId;
	dummy8 pad2[12];
};
typedef struct _ATK_PARAM_ST ATK_PARAM_ST;

struct _ATTACK_ELEMENT_CORRECT_PARAM_ST {
	u32 unk00_0: 1;
	u32 unk00_1: 1;
	u32 unk00_2: 1;
	u32 unk00_3: 1;
	u32 unk00_4: 1;
	u32 unk00_5: 1;
	u32 unk00_6: 1;
	u32 unk00_7: 1;
	u32 unk00_8: 1;
	u32 unk00_9: 1;
	u32 unk00_10: 1;
	u32 unk00_11: 1;
	u32 unk00_12: 1;
	u32 unk00_13: 1;
	u32 unk00_14: 1;
	u32 unk00_15: 1;
	u32 unk00_16: 1;
	u32 unk00_17: 1;
	u32 unk00_18: 1;
	u32 unk00_19: 1;
	u32 unk00_20: 1;
	u32 unk00_21: 1;
	u32 unk00_22: 1;
	u32 unk00_23: 1;
	u32 unk00_24: 1;
	u32 unk00_25: 1;
	u32 unk00_26: 1;
	u32 unk00_27: 1;
	u32 unk00_28: 1;
	u32 unk00_29: 1;
	u32 unk00_30: 1;
	u32 unk00_31: 1;
	s16 addRate0;
	s16 addRate1;
	s16 addRate2;
	s16 addRate3;
	s16 addRate4;
	s16 addRate5;
	s16 addRate6;
	s16 addRate7;
	s16 addRate8;
	s16 addRate9;
	s16 addRate10;
	s16 addRate11;
	s16 addRate12;
	s16 addRate13;
	s16 addRate14;
	s16 addRate15;
	s16 addRate16;
	s16 addRate17;
	s16 addRate18;
	s16 addRate19;
	s16 addRate20;
	s16 addRate21;
	s16 addRate22;
	s16 addRate23;
	s16 addRate24;
	s16 corrRate0;
	s16 corrRate1;
	s16 corrRate2;
	s16 corrRate3;
	s16 corrRate4;
	s16 corrRate5;
	s16 corrRate6;
	s16 corrRate7;
	s16 corrRate8;
	s16 corrRate9;
	s16 corrRate10;
	s16 corrRate11;
	s16 corrRate12;
	s16 corrRate13;
	s16 corrRate14;
	s16 corrRate15;
	s16 corrRate16;
	s16 corrRate17;
	s16 corrRate18;
	s16 corrRate19;
	s16 corrRate20;
	s16 corrRate21;
	s16 corrRate22;
	s16 corrRate23;
	s16 corrRate24;
	dummy8 pad1[24];
};
typedef struct _ATTACK_ELEMENT_CORRECT_PARAM_ST ATTACK_ELEMENT_CORRECT_PARAM_ST;

struct _BEHAVIOR_PARAM_ST {
	s32 variationId;
	s32 behaviorJudgeId;
	u8 ezStateBehaviorType_old;
	u8 refType;
	dummy8 pad1[2];
	s32 refId;
	s32 sfxVariationId;
	s32 stamina;
	s32 mp;
	u8 category;
	u8 heroPoint;
	dummy8 pad2[2];
};
typedef struct _BEHAVIOR_PARAM_ST BEHAVIOR_PARAM_ST;

struct _BONFIRE_WARP_PARAM_ST {
	s32 LocationEventId;
	s32 WarpEventId;
	s32 BonfireNameId;
	s32 DescriptionTextId;
	s32 PictureId;
	u8 ListId;
	u8 IsDisableQuickwarp;
	s16 CeremonyId;
	s32 onlineAreaId;
	dummy8 pad1[36];
};
typedef struct _BONFIRE_WARP_PARAM_ST BONFIRE_WARP_PARAM_ST;

struct _BUDGET_PARAM_ST {
	f32 MemoryBudget0;
	f32 MemoryBudget1;
	f32 MemoryBudget2;
	f32 MemoryBudget3;
	f32 MemoryBudget4;
	f32 MemoryBudget5;
	f32 MemoryBudget6;
	f32 MemoryBudget7;
	f32 MemoryBudget8;
	f32 MemoryBudget9;
	f32 MemoryBudget10;
	f32 MemoryBudget11;
	f32 MemoryBudget12;
	f32 MemoryBudget13;
	f32 MemoryBudget14;
	f32 MemoryBudget15;
	f32 MemoryBudget16;
	f32 MemoryBudget17;
	f32 MemoryBudget18;
	f32 MemoryBudget19;
	f32 MemoryBudget20;
	f32 MemoryBudget21;
	f32 MemoryBudget22;
	f32 MemoryBudget23;
	f32 MemoryBudget24;
	f32 MemoryBudget25;
	dummy8 pad1[28];
};
typedef struct _BUDGET_PARAM_ST BUDGET_PARAM_ST;

struct _BULLET_CREATE_LIMIT_PARAM_ST {
	u8 maxAmmount;
	dummy8 pad1[31];
};
typedef struct _BULLET_CREATE_LIMIT_PARAM_ST BULLET_CREATE_LIMIT_PARAM_ST;

struct _BULLET_PARAM_ST {
	s32 atkBullet_Id;
	s32 sfxIdBullet;
	s32 sfxIdHit;
	s32 sfxIdFlick;
	f32 life;
	f32 dist;
	f32 shootInterval;
	f32 gravityInRange;
	f32 gravityOutRange;
	f32 homingStopRange;
	f32 initVellocity;
	f32 accelInRange;
	f32 accelOutRange;
	f32 maxVellocity;
	f32 minVellocity;
	f32 accelTime;
	f32 homingBeginDist;
	f32 hitRadius;
	f32 hitRadiusMax;
	f32 spreadTime;
	f32 expDelay;
	f32 homingOffsetRange;
	f32 dmgHitRecordLifeTime;
	f32 externalForce;
	s32 spEffectIdForShooter;
	s32 autoSearchNpcThinkId;
	s32 hitBulletId;
	s32 spEffectId0;
	s32 spEffectId1;
	s32 spEffectId2;
	s32 spEffectId3;
	s32 spEffectId4;
	s16 numShoot;
	s16 homingAngle;
	s16 shootAngle;
	s16 shootAngleInterval;
	s16 shootAngleXInterval;
	u8 damageDamp;
	u8 magicDamageDamp;
	u8 fireDamageDamp;
	u8 thunderDamageDamp;
	u8 staminaDamp;
	u8 knockbackDamp;
	u8 shootAngleXZ;
	u8 lockShootLimitAng;
	u8 isPenetrate;
	u8 prevVellocityDirRate;
	u8 atkAttribute;
	u8 spAttribute;
	u8 Material_AttackType;
	u8 Material_AttackMaterial;
	u8 Material_Size;
	u8 launchConditionType;
	u8 FollowType0: 1;
	u8 FollowType1: 1;
	u8 FollowType2: 1;
	u8 EmittePosType0: 1;
	u8 EmittePosType1: 1;
	u8 EmittePosType2: 1;
	u8 IsAttackSfx: 1;
	u8 IsEndlessHit: 1;
	u8 IsPenetrateMap: 1;
	u8 IsHitBothTeam: 1;
	u8 IsUseShardHitList: 1;
	u8 IsUseMultiDmyPolyIfPlace: 1;
	u8 attachEffectType0: 1;
	u8 attachEffectType1: 1;
	u8 IsHitForceMagic: 1;
	u8 IsIgnoreSfxIfHitWater: 1;
	u8 IsIgnoreMoveStateIfHitWater: 1;
	u8 IsHitDarkForceMagic: 1;
	u8 IsInheritEffectToChild: 1;
	u8 IsInheritSpeedToChild: 1;
	u8 IsLockModule: 1;
	u8 IsSearchForTarget: 1;
	u8 IsEmittedBullet: 1;
	u8 IsInheritLifeToChild: 1;
	u8 darkDamageDamp;
	u8 bulletHitType0;
	u8 bulletHitType1;
	f32 SpHomingYAngle;
	f32 rand_ShootAngleXZ;
	f32 rand_ShootANgleY;
	s32 bulletEmitter_bulletId;
	f32 bulletEmitter_ShootInterval0;
	f32 bulletEmitter_InitInterval;
	f32 SpHomingYAngleForEnemy;
	f32 bulletEmitter_ShootInterval1;
	u8 LaunchType;
	u8 LimitBulletParamId;
	u8 CounterHitType;
	u8 IsPosHitBullet: 1;
	u8 IsAttachAttackSfx: 1;
	u8 IsSpCorrection0: 1;
	u8 IsSpCorrection1: 1;
	u8 IsPenetrateTarget: 1;
	u8 IsSpCorrection2: 1;
	u8 IsDisableIntScale: 1;
	u8 unknown: 1;
	f32 EmittePosRadius;
	s32 hitObjectId;
	f32 subLife;
	s16 subHomingAngle;
	dummy8 pad1[2];
	f32 lockShootCorrectionAng;
	dummy8 pad2[40];
};
typedef struct _BULLET_PARAM_ST BULLET_PARAM_ST;

struct _CACL_CORRECT_GRAPH_ST {
	f32 stageMaxVal0;
	f32 stageMaxVal1;
	f32 stageMaxVal2;
	f32 stageMaxVal3;
	f32 stageMaxVal4;
	f32 stageMaxGrowVal0;
	f32 stageMaxGrowVal1;
	f32 stageMaxGrowVal2;
	f32 stageMaxGrowVal3;
	f32 stageMaxGrowVal4;
	f32 adjPt_maxGrowVal0;
	f32 adjPt_maxGrowVal1;
	f32 adjPt_maxGrowVal2;
	f32 adjPt_maxGrowVal3;
	f32 adjPt_maxGrowVal4;
	f32 init_inclination_soul;
	f32 adjustment_value;
	f32 boundry_inclination_soul;
	f32 boundry_value;
	dummy8 pad1[4];
};
typedef struct _CACL_CORRECT_GRAPH_ST CACL_CORRECT_GRAPH_ST;

struct _CEREMONY_PARAM_ST {
	s32 EventLayerID;
	s32 MapStudioLayerID;
	s16 GparamID_Up;
	s16 GparamID_Low;
	s32 Point_CloudID;
	s32 GI_TextureID;
	s32 Light_GroupID;
	u8 IsReload;
	u8 IsDisableOnline;
	dummy8 pad1[10];
};
typedef struct _CEREMONY_PARAM_ST CEREMONY_PARAM_ST;

struct _CHARACTER_INIT_PARAM {
	f32 BaseRec_mp;
	f32 BaseRec_sp;
	f32 red_Falldam;
	s32 soul;
	s32 equip_Wep_Right;
	s32 equip_Subwep_Right;
	s32 equip_Wep_Left;
	s32 equip_Subwep_Left;
	s32 equip_Helm;
	s32 equip_Armor;
	s32 equip_Gaunt;
	s32 equip_Leg;
	s32 equip_Arrow;
	s32 equip_Bolt;
	s32 equip_SubArrow;
	s32 equip_SubBolt;
	s32 equip_Accessory1;
	s32 equip_Accessory2;
	s32 equip_Accessory3;
	s32 equip_Accessory4;
	s32 equip_Accessory5;
	s32 Equip_Skill_01;
	s32 Equip_Skill_02;
	s32 Equip_Skill_03;
	s32 equip_Spell_01;
	s32 equip_Spell_02;
	s32 equip_Spell_03;
	s32 equip_Spell_04;
	s32 equip_Spell_05;
	s32 equip_Spell_06;
	s32 equip_Spell_07;
	s32 Item_01;
	s32 Item_02;
	s32 Item_03;
	s32 Item_04;
	s32 Item_05;
	s32 Item_06;
	s32 Item_07;
	s32 Item_08;
	s32 Item_09;
	s32 Item_10;
	s32 npcPlayerFaceGenId;
	s32 npcPlayerThinkId;
	s16 baseHp;
	s16 baseMp;
	s16 baseSp;
	s16 arrowNum;
	s16 boltNum;
	s16 subArrowNum;
	s16 subBoltNum;
	s16 QWC_sb;
	s16 QWC_mw;
	s16 QWC_cd;
	s16 soulLvl;
	s8 baseVit;
	s8 baseWil;
	s8 baseEnd;
	s8 baseStr;
	s8 baseDex;
	s8 baseMag;
	s8 baseFai;
	s8 baseLuc;
	s8 baseHeroPoint;
	s8 baseDurability;
	u8 itemNum_01;
	u8 itemNum_02;
	u8 itemNum_03;
	u8 itemNum_04;
	u8 itemNum_05;
	u8 itemNum_06;
	u8 itemNum_07;
	u8 itemNum_08;
	u8 itemNum_09;
	u8 itemNum_10;
	u8 bodyScaleHead;
	u8 bodyScaleBreast;
	u8 BodyScaleAbdomen;
	u8 BodyScaleArm;
	u8 BodyScaleLeg;
	u8 gestureid0;
	u8 gestureid1;
	u8 gestureid2;
	u8 gestureid3;
	u8 gestureid4;
	u8 gestureid5;
	u8 gestureid6;
	u8 npcPlayerType;
	u8 npcPlayerDrawType;
	u8 NpcPlayerSex;
	u8 vowType;
	u8 VoiceType;
	dummy8 pad1[1];
	s32 equip_Wep_Right_GenId;
	s32 equip_Subwep_Right_GenId;
	s32 equip_Wep_Left_GenId;
	s32 equip_Subwep_Left_GenId;
	s32 equip_Helm_GenId;
	s32 equip_Armor_GenId;
	s32 equip_Gaunt_GenId;
	s32 equip_Leg_GenId;
	s32 equip_Wep_Body_GenId;
	s32 SecondaryItem_01;
	s32 SecondaryItem_02;
	s32 SecondaryItem_03;
	s32 SecondaryItem_04;
	s32 SecondaryItem_05;
	s32 SecondaryItem_06;
	s32 SecondaryItem_07;
	s32 SecondaryItem_08;
	u8 secondaryItemNum_01;
	u8 secondaryItemNum_02;
	u8 secondaryItemNum_03;
	u8 secondaryItemNum_04;
	u8 secondaryItemNum_05;
	u8 secondaryItemNum_06;
	u8 secondaryItemNum_07;
	u8 secondaryItemNum_08;
	dummy8 pad2[12];
};
typedef struct _CHARACTER_INIT_PARAM CHARACTER_INIT_PARAM;

struct _CHARACTER_LOAD_PARAM_ST {
	u8 ChrBndType;
	u8 AniBndType;
	u8 TexBndType;
	u8 BehBndType;
	u8 SndChrType;
};
typedef struct _CHARACTER_LOAD_PARAM_ST CHARACTER_LOAD_PARAM_ST;

struct _CHARMAKEMENUTOP_PARAM_ST {
	s32 CommandID;
	s32 FaceParamID;
	s32 TableID;
	s32 ViewCondition;
	u8 PreviewMode;
	dummy8 pad1[3];
	s8 MenuType;
	dummy8 pad2[11];
};
typedef struct _CHARMAKEMENUTOP_PARAM_ST CHARMAKEMENUTOP_PARAM_ST;

struct _CHARMAKEMENU_LISTITEM_PARAM_ST {
	s32 Value;
	s32 CaptionId;
	u8 IconID;
	dummy8 pad1[7];
};
typedef struct _CHARMAKEMENU_LISTITEM_PARAM_ST CHARMAKEMENU_LISTITEM_PARAM_ST;

struct _CLEAR_COUNT_CORRECT_PARAM_ST {
	f32 HP;
	f32 Mana;
	f32 Stamina;
	f32 PhysDmg;
	f32 slashDmg;
	f32 blowDmg;
	f32 thrustDmg;
	f32 neutral;
	f32 MagicDmg;
	f32 FireDmg;
	f32 ThunderDmg;
	f32 DarkDmg;
	f32 PhysResist;
	f32 MagicResist;
	f32 FireResist;
	f32 ThunderResist;
	f32 DarkResist;
	f32 StaminaDmg;
	f32 MpRecover;
	f32 PoisonResist;
	f32 ToxicResist;
	f32 BleedResist;
	f32 CurseResist;
	f32 FrostResist;
	f32 HpRecover;
	f32 subMpRecover;
	f32 subHpRecover;
	dummy8 pad1[20];
};
typedef struct _CLEAR_COUNT_CORRECT_PARAM_ST CLEAR_COUNT_CORRECT_PARAM_ST;

struct _COOL_TIME_PARAM_ST {
	f32 limitationTime_0;
	f32 observationTime_0;
	f32 limitationTime_1;
	f32 observationTime_1;
	f32 limitationTime_2;
	f32 observationTime_2;
	f32 limitationTime_3;
	f32 observationTime_3;
};
typedef struct _COOL_TIME_PARAM_ST COOL_TIME_PARAM_ST;

struct _CULT_SETTING_PARAM_ST {
	f32 Distance;
	f32 Angle;
	s32 EventFlagId;
	s16 Coefficient;
	s8 CultState1;
	s8 CultState2;
	dummy8 pad1[16];
};
typedef struct _CULT_SETTING_PARAM_ST CULT_SETTING_PARAM_ST;

struct _DECAL_PARAM_ST {
	s32 textureId;
	s32 dmypolyId;
	f32 pitchAngle;
	f32 yawAngle;
	f32 nearDistance;
	f32 farDistance;
	f32 nearSize;
	f32 farSize;
	s32 maskSpeffectId;
	u32 pad_10: 4;
	u32 replaceTextureId_byMaterial: 1;
	u32 dmypolyCategory: 2;
	u32 pad_05: 4;
	u32 useDeferredDecal: 1;
	u32 usePaintDecal: 1;
	u32 bloodTypeEnable: 1;
	u32 bUseNormal: 1;
	u32 pad_08: 1;
	u32 pad_09: 1;
	u32 usePom: 1;
	u32 useEmissive: 1;
	u32 putVertical: 1;
	u32 pad_13: 12;
	s16 randomSizeMin;
	s16 randomSizeMax;
	f32 randomRollMin;
	f32 randomRollMax;
	f32 randomPitchMin;
	f32 randomPitchMax;
	f32 randomYawMin;
	f32 randomYawMax;
	f32 pomHeightScale;
	u8 pomSampleMin;
	u8 pomSampleMax;
	s8 blendMode;
	s8 appearDirType;
	f32 emissiveValueBegin;
	f32 emissiveValueEnd;
	f32 emissiveTime;
	u8 bIntpEnable;
	dummy8 pad_01[3];
	f32 intpIntervalDist;
	s32 beginIntpTextureId;
	s32 endIntpTextureId;
	s32 appearSfxId;
	f32 appearSfxOffsetPos;
	s32 maskTextureId;
	s32 diffuseTextureId;
	s32 reflecTextureId;
	f32 maskScale;
	s32 normalTextureId;
	s32 heightTextureId;
	s32 emissiveTextureId;
	u8 diffuseColorR;
	u8 diffuseColorG;
	u8 diffuseColorB;
	dummy8 pad_03[1];
	u8 reflecColorR;
	u8 reflecColorG;
	u8 reflecColorB;
	u8 bLifeEnable;
	f32 siniScale;
	f32 lifeTimeSec;
	f32 fadeOutTimeSec;
	s16 priority;
	u8 bDistThinOutEnable;
	u8 bAlignedTexRandomVariationEnable;
	f32 distThinOutCheckDist;
	f32 distThinOutCheckAngleDeg;
	u8 distThinOutMaxNum;
	u8 distThinOutCheckNum;
	s16 delayAppearFrame;
	u32 randVaria_Diffuse: 4;
	u32 randVaria_Mask: 4;
	u32 randVaria_Reflec: 4;
	u32 pad_12: 4;
	u32 randVaria_Normal: 4;
	u32 randVaria_Height: 4;
	u32 randVaria_Emissive: 4;
	u32 pad_11: 4;
	f32 fadeInTimeSec;
	dummy8 pad1[8];
};
typedef struct _DECAL_PARAM_ST DECAL_PARAM_ST;

struct _DIRECTION_CAMERA_PARAM_ST {
	u8 isUseOption: 1;
	dummy8 pad1[15];
};
typedef struct _DIRECTION_CAMERA_PARAM_ST DIRECTION_CAMERA_PARAM_ST;

struct _EQUIP_MTRL_SET_PARAM_ST {
	s32 materialId01;
	s32 materialId02;
	s32 materialId03;
	s32 materialId04;
	s32 materialId05;
	s8 itemNum01;
	s8 itemNum02;
	s8 itemNum03;
	s8 itemNum04;
	s8 itemNum05;
	u8 isDisableDispNum01: 1;
	u8 isDisableDispNum02: 1;
	u8 isDisableDispNum03: 1;
	u8 isDisableDispNum04: 1;
	u8 isDisableDispNum05: 1;
	dummy8 pad1[6];
};
typedef struct _EQUIP_MTRL_SET_PARAM_ST EQUIP_MTRL_SET_PARAM_ST;

struct _EQUIP_PARAM_ACCESSORY_ST {
	s32 refId;
	s32 sfxVariationId;
	f32 weight;
	s32 behaviorId;
	s32 basicPrice;
	s32 sellValue;
	s32 sortId;
	s32 qwcId;
	s16 equipModelId;
	s16 iconId;
	s16 shopLv;
	s16 trophySGradeId;
	s16 trophySeqId;
	u8 equipModelCategory;
	u8 equipModelGender;
	u8 accessoryCategory;
	u8 refCategory;
	u8 spEffectCategory;
	dummy8 pad1[1];
	s32 vagrantItemLotId;
	s32 vagrantBonusEneDropItemLotId;
	s32 vagrantItemEneDropItemLotId;
	u8 IsDeposit: 1;
	u8 IsEquipOutBrake: 1;
	u8 disableMultiDropShare: 1;
	u8 IsDiscard: 1;
	u8 isDrop: 1;
	u8 showLogCondType: 1;
	u8 showDialogCondType: 2;
	dummy8 pad2[3];
	s32 saleValue;
	s16 accessoryGroup;
	u8 vowId;
	u8 compTrophySedId;
	s32 residentSpEffectId1;
	s32 residentSpEffectId2;
	s32 residentSpEffectId3;
	s32 residentSpEffectId4;
	dummy8 pad3[8];
};
typedef struct _EQUIP_PARAM_ACCESSORY_ST EQUIP_PARAM_ACCESSORY_ST;

struct _EQUIP_PARAM_GOODS_ST {
	s32 refId_default;
	s32 sfxVariationId;
	f32 weight;
	s32 basicPrice;
	s32 sellValue;
	s32 behaviorId;
	s32 replaceItemId;
	s32 sortId;
	s32 appearanceReplaceItemId;
	s32 yesNoDialogMessageId;
	s32 magicId;
	s16 iconId;
	s16 modelId;
	s16 shopLv;
	s16 compTrophySedId;
	s16 trophySeqId;
	s16 maxNum;
	u8 consumeHeroPoint;
	u8 overDexterity;
	u8 goodsType;
	u8 refCategory;
	u8 spEffectCategory;
	u8 pad3;
	s8 goodsUseAnim;
	u8 opmeMenuType;
	u8 useLimitCategory;
	u8 replaceCategory;
	u8 vowType0: 1;
	u8 vowType1: 1;
	u8 vowType2: 1;
	u8 vowType3: 1;
	u8 vowType4: 1;
	u8 vowType5: 1;
	u8 vowType6: 1;
	u8 vowType7: 1;
	u8 vowType8: 1;
	u8 vowType9: 1;
	u8 vowType10: 1;
	u8 vowType11: 1;
	u8 vowType12: 1;
	u8 vowType13: 1;
	u8 vowType14: 1;
	u8 vowType15: 1;
	u8 enable_live: 1;
	u8 enable_gray: 1;
	u8 enable_white: 1;
	u8 enable_black: 1;
	u8 enable_multi: 1;
	u8 disable_offline: 1;
	u8 isEquip: 1;
	u8 isConsume: 1;
	u8 isAutoEquip: 1;
	u8 isEstablishment: 1;
	u8 isOnlyOne: 1;
	u8 isDiscard: 1;
	u8 isDeposit: 1;
	u8 isDisableHand: 1;
	u8 isRemoveItem_forGameClear: 1;
	u8 isSuppleItem: 1;
	u8 isFullSuppleItem: 1;
	u8 isEnhance: 1;
	u8 isFixItem: 1;
	u8 disableMutliDropShare: 1;
	u8 disableUseAtColiseum: 1;
	u8 disableUseAtOutofColiseum: 1;
	u8 isEnableFastUseItem: 1;
	u8 isApplySpecialEffect: 1;
	u8 syncNumVaryId: 1;
	u8 isAshenEstusFlask: 1;
	u8 unknown1: 1;
	u8 unknown2: 1;
	u8 unknown3: 1;
	u8 unknown4: 1;
	u8 unknown5: 1;
	u8 unknown6: 1;
	s32 refId_1;
	s32 refVirtualWepId;
	s32 vagrantItemLotId;
	s32 vagrantBonusEneDropItemLotId;
	s32 vagrantItemEneDropItemLotId;
	s32 castSfxId;
	s32 fireSfxId;
	s32 effectSfxId;
	u8 enable_ActiveEmber: 1;
	u8 isBonfireWarpItem: 1;
	u8 enable_Ladder: 1;
	u8 isUseMultiPlayPreparation: 1;
	u8 canMultiUse: 1;
	u8 isShieldEnchant: 1;
	u8 isWarpProhibited: 1;
	u8 isUseMultiPenaltyOnly: 1;
	u8 suppleType;
	u8 autoReplenishType;
	u8 isDrop;
	s16 maxRepNum;
	u8 invadeType;
	dummy8 pad1[1];
	s32 shopId;
	s16 consumeMP;
	s16 useLimitCategory2;
	dummy8 pad2[8];
};
typedef struct _EQUIP_PARAM_GOODS_ST EQUIP_PARAM_GOODS_ST;

struct _EQUIP_PARAM_PROTECTOR_ST {
	s32 sortId;
	s32 wanderingEquipId;
	s32 vagrantItemLotId;
	s32 vagrantBonuseneDropItemLotId;
	s32 vagrantItemEneDropItemLotId;
	s32 fixPrice;
	s32 basicPrice;
	s32 sellValue;
	f32 weight;
	s32 residentSpEffectId;
	s32 residentSpEffectId2;
	s32 residentSpEffectId3;
	s32 materialSetId;
	f32 partsDamageRate;
	f32 correctSARecover;
	s32 originEquipPro1;
	s32 originEquipPro2;
	s32 originEquipPro3;
	s32 originEquipPro4;
	s32 originEquipPro5;
	s32 originEquipPro6;
	s32 originEquipPro7;
	s32 originEquipPro8;
	s32 originEquipPro9;
	s32 originEquipPro10;
	s32 originEquipPro11;
	s32 originEquipPro12;
	s32 originEquipPro13;
	s32 originEquipPro14;
	s32 originEquipPro15;
	s32 originEquipPro16;
	f32 faceScaleM_ScaleX;
	f32 faceScaleM_ScaleZ;
	f32 faceScaleM_MaxX;
	f32 faceScaleM_MaxZ;
	f32 faceScaleF_ScaleX;
	f32 faceScaleF_ScaleZ;
	f32 faceScaleF_MaxX;
	f32 faceScaleF_MaxZ;
	s32 qwcId;
	s16 equipModelId;
	s16 iconIdM;
	s16 iconIdF;
	s16 Knockback;
	s16 KnockbackBounceRate;
	s16 durability;
	s16 durabilityMax;
	s16 saDurability;
	s16 defFlickPower;
	s16 defensePhys;
	s16 defenseMagic;
	s16 defenseFire;
	s16 defenseThunder;
	s16 defenseSlash;
	s16 defenseBlow;
	s16 defenseThrust;
	s16 resistPoison;
	s16 resistToxic;
	s16 resistBlood;
	s16 resistCurse;
	s16 reinforceTypeId;
	s16 compTrophySedId;
	s16 shopLv;
	u8 knockbackParamId;
	u8 FlickDamageCutRate;
	u8 equipModelCategory;
	u8 equipModelGender;
	u8 protectorCategory;
	u8 defenseMaterial;
	u8 defenseMaterialSfx;
	u8 partsDmgType;
	u8 defenseMaterial_Weak;
	u8 defenseMaterialSfx_Weak;
	u8 isDeposit: 1;
	u8 headEquip: 1;
	u8 bodyEquip: 1;
	u8 armEquip: 1;
	u8 legEquip: 1;
	u8 useFaceScale: 1;
	u8 InvisibleFlag00: 1;
	u8 InvisibleFlag01: 1;
	u8 InvisibleFlag02: 1;
	u8 InvisibleFlag03: 1;
	u8 InvisibleFlag04: 1;
	u8 InvisibleFlag05: 1;
	u8 InvisibleFlag06: 1;
	u8 InvisibleFlag07: 1;
	u8 InvisibleFlag08: 1;
	u8 InvisibleFlag09: 1;
	u8 InvisibleFlag10: 1;
	u8 InvisibleFlag11: 1;
	u8 InvisibleFlag12: 1;
	u8 InvisibleFlag13: 1;
	u8 InvisibleFlag14: 1;
	u8 InvisibleFlag15: 1;
	u8 InvisibleFlag16: 1;
	u8 InvisibleFlag17: 1;
	u8 InvisibleFlag18: 1;
	u8 InvisibleFlag19: 1;
	u8 InvisibleFlag20: 1;
	u8 InvisibleFlag21: 1;
	u8 InvisibleFlag22: 1;
	u8 InvisibleFlag23: 1;
	u8 InvisibleFlag24: 1;
	u8 InvisibleFlag25: 1;
	u8 InvisibleFlag26: 1;
	u8 InvisibleFlag27: 1;
	u8 InvisibleFlag28: 1;
	u8 InvisibleFlag29: 1;
	u8 InvisibleFlag30: 1;
	u8 InvisibleFlag31: 1;
	u8 InvisibleFlag32: 1;
	u8 InvisibleFlag33: 1;
	u8 InvisibleFlag34: 1;
	u8 InvisibleFlag35: 1;
	u8 InvisibleFlag36: 1;
	u8 InvisibleFlag37: 1;
	u8 InvisibleFlag38: 1;
	u8 InvisibleFlag39: 1;
	u8 InvisibleFlag40: 1;
	u8 InvisibleFlag41: 1;
	u8 InvisibleFlag42: 1;
	u8 InvisibleFlag43: 1;
	u8 InvisibleFlag44: 1;
	u8 InvisibleFlag45: 1;
	u8 InvisibleFlag46: 1;
	u8 InvisibleFlag47: 1;
	u8 disableMultiDropShare: 1;
	u8 simpleModelForDlc1: 1;
	u8 isGuestDrop0: 1;
	u8 isGuestDrop1: 1;
	u8 showLogCondType: 1;
	u8 showDialogCondType: 1;
	u8 IsDiscard: 1;
	u8 IsDrop: 1;
	u8 Unk4: 1;
	u8 Unk5: 1;
	f32 PhysDamageCutRate;
	f32 SlashDamageCutRate;
	f32 StrikeDamageCutRate;
	f32 ThrustDamageCutRate;
	f32 MagicDamageCutRate;
	f32 FireDamageCutRate;
	f32 ThunderDamageCutRate;
	u16 defenseMaterialSfx1;
	u16 defenseMaterialSfx_Weak1;
	u16 defenseMaterial1;
	u16 defenseMaterial_Weak1;
	u16 defenseMaterialSfx2;
	u16 defenseMaterialSfx_Weak2;
	u16 footMaterialSe;
	u16 defenseMaterial_Weak2;
	s32 autoFootEffectDecalBaseId1;
	f32 toughnessDamageCutRate;
	dummy8 pad1[4];
	f32 DarkDamageCutRate;
	s16 defenseDark;
	u8 Unk6;
	u8 Unk7;
	s32 Unk8;
	s32 postureControlId;
	s32 saleValue;
	s16 resistFrost;
	u8 Mask00;
	u8 Mask01;
	u8 Mask02;
	u8 Mask03;
	u8 Mask04;
	u8 Mask05;
	u8 Mask06;
	u8 Mask07;
	u8 Mask08;
	u8 Mask09;
	u8 Mask10;
	u8 Mask11;
	u8 Mask12;
	u8 Mask13;
	u8 Mask14;
	u8 Mask15;
	u8 Mask16;
	u8 Mask17;
	u8 Mask18;
	u8 Mask19;
	u8 Mask20;
	u8 Mask21;
	u8 Mask22;
	u8 Mask23;
	u8 Mask24;
	u8 Mask25;
	u8 Mask26;
	u8 Mask27;
	u8 Mask28;
	u8 Mask29;
	u8 Mask30;
	u8 Mask31;
	u8 Mask32;
	u8 Mask33;
	u8 Mask34;
	u8 Mask35;
	u8 Mask36;
	u8 Mask37;
	u8 Mask38;
	u8 Mask39;
	u8 Mask40;
	u8 Mask41;
	u8 Mask42;
	u8 Mask43;
	u8 Mask44;
	u8 Mask45;
	u8 Mask46;
	u8 Mask47;
	u8 Mask48;
	u8 Mask49;
	u8 Mask50;
	u8 Mask51;
	u8 Mask52;
	u8 Mask53;
	u8 Mask54;
	u8 Mask55;
	u8 Mask56;
	u8 Mask57;
	u8 Mask58;
	u8 Mask59;
	u8 Mask60;
	u8 Mask61;
	u8 Mask62;
	u8 Mask63;
	u8 Mask64;
	u8 Mask65;
	u8 Mask66;
	u8 Mask67;
	u8 Mask68;
	u8 Mask69;
	u8 Mask70;
	u8 Mask71;
	u8 Mask72;
	u8 Mask73;
	u8 Mask74;
	u8 Mask75;
	u8 Mask76;
	u8 Mask77;
	u8 Mask78;
	u8 Mask79;
	u8 Mask80;
	u8 Mask81;
	u8 Mask82;
	u8 Mask83;
	u8 Mask84;
	u8 Mask85;
	u8 Mask86;
	u8 Mask87;
	u8 Mask88;
	u8 Mask89;
	u8 Mask90;
	u8 Mask91;
	u8 Mask92;
	u8 Mask93;
	u8 Mask94;
	u8 Mask95;
	u8 Mask96;
	u8 Mask97;
};
typedef struct _EQUIP_PARAM_PROTECTOR_ST EQUIP_PARAM_PROTECTOR_ST;

struct _EQUIP_PARAM_WEAPON_ST {
	s32 behaviorVariationId;
	s32 sortId;
	s32 wanderingEquipId;
	f32 weight;
	f32 weaponWeightRate;
	s32 fixPrice;
	s32 basicPrice;
	s32 sellValue;
	f32 correctStrength;
	f32 correctAgility;
	f32 corretMagic;
	f32 corretFaith;
	f32 physGuardCutRate;
	f32 magGuardCutRate;
	f32 fireGuardCutRate;
	f32 thunGuardCutRate;
	s32 spEffectBehaviorId0;
	s32 spEffectBehaviorId1;
	s32 spEffectBehaviorId2;
	s32 residentSpEffectId0;
	s32 residentSpEffectId1;
	s32 residentSpEffectId2;
	s32 materialSetId;
	s32 originEquipWep0;
	s32 originEquipWep1;
	s32 originEquipWep2;
	s32 originEquipWep3;
	s32 originEquipWep4;
	s32 originEquipWep5;
	s32 originEquipWep6;
	s32 originEquipWep7;
	s32 originEquipWep8;
	s32 originEquipWep9;
	s32 originEquipWep10;
	s32 originEquipWep11;
	s32 originEquipWep12;
	s32 originEquipWep13;
	s32 originEquipWep14;
	s32 originEquipWep15;
	f32 weakA_DamageRate;
	f32 weakB_DamageRate;
	f32 weakC_DamageRate;
	f32 weakD_DamageRate;
	s32 vagrantItemLotId;
	s32 vagrantBonuseneDropItemLotId;
	s32 vagrantItemEneDropItemLotId;
	s16 equipModelId;
	s16 iconId;
	s16 durability;
	s16 durailityMax;
	s16 attackThrowEscape;
	s16 parryDamageLife;
	s16 atkBasePhysics;
	s16 atkBaseMagic;
	s16 atkBaseFire;
	s16 atkBaseThunder;
	s16 atkBaseStamina;
	s16 saWeaponDamage;
	s16 saDurability;
	s16 guardAngle;
	s16 staminaGuardDef;
	s16 reinforceTypeId;
	s16 trophySGradeId;
	s16 trophySeqId;
	s16 throwAtkRate;
	s16 bowDistRate;
	u8 equipModelCategory;
	u8 equipModelGender;
	u8 weaponCategory;
	u8 wepmotionCategory;
	u8 guardmotionCategory;
	u8 atkMaterial;
	u8 defMaterial;
	u8 defSfxMaterial;
	u8 correctType;
	u8 spAttribute;
	s16 spAtkCategory;
	u8 wepmotionOneHandId;
	u8 wepmotionBothHandId;
	u8 properStrength;
	u8 properAgility;
	u8 properMagic;
	u8 properFaith;
	u8 overStrength;
	u8 attackBaseParry;
	u8 defenseBaseParry;
	u8 guardBaseRepel;
	u8 attackBaseRepel;
	u8 guardCutCancelRate;
	u8 guardLevel;
	u8 slashGuardCutRate;
	u8 blowGuardCutRate;
	u8 thrustGuardCutRate;
	u8 poisonGuardResist;
	u8 toxicGuardResist;
	u8 bloodGuardResist;
	u8 curseGuardResist;
	u8 atkAttribute;
	u8 rightHandEquipable: 1;
	u8 leftHandEquipable: 1;
	u8 bothHandEquipable: 1;
	u8 arrowSlotEquipable: 1;
	u8 boltSlotEquipable: 1;
	u8 enableGuard: 1;
	u8 enableParry: 1;
	u8 enableMagic: 1;
	u8 enablePyromancy: 1;
	u8 enableMiracle: 1;
	u8 enableVowMagic: 1;
	u8 isNormalAttackType: 1;
	u8 isBlowAttackType: 1;
	u8 isSlashAttackType: 1;
	u8 isThrustAttackType: 1;
	u8 isEnhance: 1;
	u8 isHeroPointCorrect: 1;
	u8 isCustom: 1;
	u8 disableBaseChangeReset: 1;
	u8 disableRepair: 1;
	u8 isDarkHand: 1;
	u8 simpleModelForDlc: 1;
	u8 lanternWep: 1;
	u8 isVersusGhostWep: 1;
	u8 infusion_icon_a: 1;
	u8 infusion_icon_b: 1;
	u8 infusion_icon_c: 1;
	u8 infusion_icon_d: 1;
	u8 infusion_icon_e: 1;
	u8 infusion_icon_f: 1;
	u8 DisableShoot: 1;
	u8 EnableRepository: 1;
	u8 DisableMultiDropShare2: 1;
	u8 IsDiscard: 1;
	u8 IsDrop: 1;
	u8 showLogCondType: 1;
	u8 enableThrow: 1;
	u8 showDialogCondType: 2;
	u8 disableGemAttr: 1;
	u16 defSfxMaterial1;
	u8 wepCollidableType0;
	u8 wepCollidableType1;
	u8 postureControlId_Right;
	u8 postureControlId_Left;
	s32 Group0_AtkVfxId;
	s32 Group0_DummyPolyId0;
	s32 Group0_DummyPolyId1;
	s32 Group1_AtkVfxId;
	s32 Group1_DummyPolyId0;
	s32 Group1_DummyPolyId1;
	s32 Group2_AtkVfxId;
	s32 Group2_DummyPolyId0;
	s32 Group2_DummyPolyId1;
	s32 Group3_AtkVfxId;
	s32 Group3_DummyPolyId0;
	s32 Group3_DummyPolyId1;
	s32 Group4_AtkVfxId;
	s32 Group4_DummyPolyId0;
	s32 Group4_DummyPolyId1;
	s32 Group5_AtkVfxId;
	s32 Group5_DummyPolyId0;
	s32 Group5_DummyPolyId1;
	s32 Group6_AtkVfxId;
	s32 Group6_DummyPolyId0;
	s32 Group6_DummyPolyId1;
	s32 Group7_AtkVfxId;
	s32 Group7_DummyPolyId0;
	s32 Group7_DummyPolyId1;
	s16 defSfxMaterial2;
	s16 defSeMaterial2;
	s32 absorpParamId;
	f32 toughnessCorrectRate;
	u8 isValidTough_ProtSADmg: 1;
	u8 isDualBlade: 1;
	u8 isAutoEquip: 1;
	u8 isEnableEmergencyStep: 1;
	u8 invisibleOnRemo: 1;
	dummy8 pad2: 3;
	u8 correctType_Magic;
	u8 correctType_Fire;
	u8 correctType_Thunder;
	f32 weakE_DamageRate;
	f32 weakF_DamageRate;
	f32 darkGuardCutRate;
	s16 atkBaseDark;
	u8 correctType_Dark;
	u8 correctType_Poison;
	s32 swordArt_ActId;
	u8 correctType_Bleed;
	u8 properLuck;
	u8 freezeGuardResist;
	u8 autoReplenishType;
	s32 swordArtsParamId;
	f32 correctLuck;
	u32 arrowBoltEquipId;
	u8 DerivationLevelType;
	u8 enchantSfxSize;
	s16 displayTypeId;
	f32 physGuardCutRate_MaxCorrect;
	f32 magGuardCutRate_MaxCorrect;
	f32 fireGuardCutRate_MaxCorrect;
	f32 thunGuardCutRate_MaxCorrect;
	f32 darkGuardCutRate_MaxCorrect;
	f32 poisonGuardResist_MaxCorrect;
	f32 diseaseGuardResist_MaxCorrect;
	f32 bloodGuardResist_MaxCorrect;
	f32 curseGuardResist_MaxCorrect;
	f32 freezeGuardResist_MaxCorrect;
	f32 staminaGuardDef_MaxCorrect;
	s32 weaponVfx0;
	s32 weaponVfx1;
	s32 weaponVfx2;
	s32 weaponVfx3;
	s32 weaponVfx4;
	s32 weaponVfx5;
	s32 weaponVfx6;
	s32 weaponVfx7;
	f32 StaminaConsumeRate;
	f32 vsPlayerDmgCorrectRate_Physics;
	f32 vsPlayerDmgCorrectRate_Magic;
	f32 vsPlayerDmgCorrectRate_Fire;
	f32 vsPlayerDmgCorrectRate_Thunder;
	f32 vsPlayerDmgCorrectRate_Dark;
	f32 vsPlayerDmgCorrectRate_Poison;
	f32 vsPlayerDmgCorrectRate_Blood;
	f32 vsPlayerDmgCorrectRate_Freeze;
	s32 attainmentWepStatusStr;
	s32 attainmentWepStatusDex;
	s32 attainmentWepStatusMag;
	s32 attainmentWepStatusFai;
	s32 attainmentWepStatusLuc;
	s32 attackElementCorrectId;
	s32 saleValue;
	u8 reinforceShopCategory;
	u8 maxArrowQuantity;
	u8 residentSfx_1_IsVisibleForHang: 1;
	u8 residentSfx_2_IsVisibleForHang: 1;
	u8 residentSfx_3_IsVisibleForHang: 1;
	u8 residentSfx_4_IsVisibleForHang: 1;
	u8 isSoulParamIdChange_model0: 1;
	u8 isSoulParamIdChange_model1: 1;
	u8 isSoulParamIdChange_model2: 1;
	u8 isSoulParamIdChange_model3: 1;
	u8 wepSeIdOffset;
	s32 baseChangePrice;
	s16 levelSyncCorrectId;
	dummy8 pad1[38];
};
typedef struct _EQUIP_PARAM_WEAPON_ST EQUIP_PARAM_WEAPON_ST;

struct _ESTUS_FLASK_RECOVERY_PARAM_ST {
	u8 host;
	u8 invadeOrb_None;
	u8 invadeOrb_Umbasa;
	u8 invadeOrb_Berserker;
	u8 invadeOrb_Sinners;
	u8 invadeSign_None;
	u8 invadeSign_Umbasa;
	u8 invadeSign_Berserker;
	u8 invadeSign_Sinners;
	u8 invadeRing_Sinners;
	u8 invadeRing_Rosalia;
	u8 invadeRing_Forest;
	u8 coopSign_None;
	u8 coopSign_Umbasa;
	u8 coopSign_Berserker;
	u8 coopSign_Sinners;
	u8 coopRing_RedHunter;
	u8 invadeRing_Anor;
	u16 paramReplaceRate;
	s32 paramReplaceId;
};
typedef struct _ESTUS_FLASK_RECOVERY_PARAM_ST ESTUS_FLASK_RECOVERY_PARAM_ST;

struct _FACE_GEN_PARAM_ST {
	u8 FaceGeoData01;
	u8 FaceGeoData02;
	u8 FaceGeoData03;
	u8 FaceGeoData04;
	u8 FaceGeoData05;
	u8 FaceGeoData06;
	u8 FaceGeoData07;
	u8 FaceGeoData08;
	u8 FaceGeoData09;
	u8 FaceGeoData10;
	u8 FaceGeoData11;
	u8 FaceGeoData12;
	u8 FaceGeoData13;
	u8 FaceGeoData14;
	u8 FaceGeoData15;
	u8 FaceGeoData16;
	u8 FaceGeoData17;
	u8 FaceGeoData18;
	u8 FaceGeoData19;
	u8 FaceGeoData20;
	u8 FaceGeoData21;
	u8 FaceGeoData22;
	u8 FaceGeoData23;
	u8 FaceGeoData24;
	u8 FaceGeoData25;
	u8 FaceGeoData26;
	u8 FaceGeoData27;
	u8 FaceGeoData28;
	u8 FaceGeoData29;
	u8 FaceGeoData30;
	u8 FaceGeoData31;
	u8 FaceGeoData32;
	u8 FaceGeoData33;
	u8 FaceGeoData34;
	u8 FaceGeoData35;
	u8 FaceGeoData36;
	u8 FaceGeoData37;
	u8 FaceGeoData38;
	u8 FaceGeoData39;
	u8 FaceGeoData40;
	u8 FaceGeoData41;
	u8 FaceGeoData42;
	u8 FaceGeoData43;
	u8 FaceGeoData44;
	u8 FaceGeoData45;
	u8 FaceGeoData46;
	u8 FaceGeoData47;
	u8 FaceGeoData48;
	u8 FaceGeoData49;
	u8 FaceTexData00;
	u8 FaceTexData01;
	u8 FaceTexData02;
	u8 FaceTexData03;
	u8 FaceTexData04;
	u8 FaceTexData05;
	u8 FaceTexData06;
	u8 FaceTexData07;
	u8 FaceTexData08;
	u8 FaceTexData09;
	u8 FaceTexData10;
	u8 FaceTexData11;
	u8 FaceTexData12;
	u8 FaceTexData13;
	u8 FaceTexData14;
	u8 FaceTexData15;
	u8 FaceTexData16;
	u8 FaceTexData17;
	u8 FaceTexData18;
	u8 FaceTexData19;
	u8 FaceTexData20;
	u8 FaceTexData21;
	u8 FaceTexData22;
	u8 FaceTexData23;
	u8 FaceTexData24;
	u8 FaceTexData25;
	u8 FaceTexData26;
	u8 FaceTexData27;
	u8 FaceTexData28;
	u8 FaceTexData29;
	u8 FaceTexData30;
	u8 FaceTexData31;
	u8 FaceTexData32;
	u8 FaceTexData33;
	u8 FaceTexData34;
	u8 FaceTexData35;
	u8 FaceTexData36;
	u8 FaceTexData37;
	u8 FaceTexData38;
	u8 FaceTexData39;
	u8 FaceTexData40;
	u8 FaceTexData41;
	u8 FaceTexData42;
	u8 FaceTexData43;
	u8 FaceTexData44;
	u8 FaceTexData45;
	u8 FaceTexData46;
	u8 FaceTexData47;
	u8 FaceTexData48;
	u8 FaceTexData49;
	u8 FaceTexData50;
	u8 facePartsId;
	u8 skinColor_R;
	u8 skinColor_G;
	u8 skinColor_B;
	u8 hairPartsId;
	u8 hairColor_R;
	u8 hairColor_G;
	u8 hairColor_B;
	u8 eyeLPartsId;
	u8 eyeLColor_R;
	u8 eyeLColor_G;
	u8 eyeLColor_B;
	u8 eyeRPartsId;
	u8 eyeRColor_R;
	u8 eyeRColor_G;
	u8 eyeRColor_B;
	u8 eyeBrowPartsId;
	u8 eyeBrowColor_R;
	u8 eyeBrowColor_G;
	u8 eyeBrowColor_B;
	u8 beardPartsId;
	u8 beardColor_R;
	u8 beardColor_G;
	u8 beardColor_B;
	u8 accessoriesPartsId;
	u8 accessoriesColor_R;
	u8 accessoriesColor_G;
	u8 accessoriesColor_B;
	u8 decalPartsId;
	u8 decalColor_R;
	u8 decalColor_G;
	u8 decalColor_B;
	u8 decalPosX;
	u8 decalPosY;
	u8 decalAngle;
	u8 decalScale;
};
typedef struct _FACE_GEN_PARAM_ST FACE_GEN_PARAM_ST;

struct _FACE_PARAM_ST {
	u8 facePartsId;
	u8 skinColor_R;
	u8 skinColor_G;
	u8 skinColor_B;
	u8 hairPartsId;
	u8 hairColor_R;
	u8 hairColor_G;
	u8 hairColor_B;
	u8 eyeLPartsId;
	u8 eyeLColor_R;
	u8 eyeLColor_G;
	u8 eyeLColor_B;
	u8 eyeRPartsId;
	u8 eyeRColor_R;
	u8 eyeRColor_G;
	u8 eyeRColor_B;
	u8 eyeBrowPartsId;
	u8 eyeBrowColor_R;
	u8 eyeBrowColor_G;
	u8 eyeBrowColor_B;
	u8 beardPartsId;
	u8 beardColor_R;
	u8 beardColor_G;
	u8 beardColor_B;
	u8 accessoriesPartsId;
	u8 accessoriesColor_R;
	u8 accessoriesColor_G;
	u8 accessoriesColor_B;
	u8 decalPartsId;
	u8 decalColor_R;
	u8 decalColor_G;
	u8 decalColor_B;
	u8 decalPosX;
	u8 decalPosY;
	u8 decalAngle;
	u8 decalScale;
	u8 ChrBodyScaleHead;
	u8 ChrBodyScaleBreast;
	u8 ChrBodyScaleAbdomen;
	u8 ChrBodyScaleArm;
	u8 ChrBodyScaleLeg;
	u8 Age;
	u8 Gender;
	u8 carricatureGeometry;
	u8 carricatureTexture;
	u8 FaceGeoData00;
	u8 FaceGeoData01;
	u8 FaceGeoData02;
	u8 FaceGeoData03;
	u8 FaceGeoData04;
	u8 FaceGeoData05;
	u8 FaceGeoData06;
	u8 FaceGeoData07;
	u8 FaceGeoData08;
	u8 FaceGeoData09;
	u8 FaceGeoData10;
	u8 FaceGeoData11;
	u8 FaceGeoData12;
	u8 FaceGeoData13;
	u8 FaceGeoData14;
	u8 FaceGeoData15;
	u8 FaceGeoData16;
	u8 FaceGeoData17;
	u8 FaceGeoData18;
	u8 FaceGeoData19;
	u8 FaceGeoData20;
	u8 FaceGeoData21;
	u8 FaceGeoData22;
	u8 FaceGeoData23;
	u8 FaceGeoData24;
	u8 FaceGeoData25;
	u8 FaceGeoData26;
	u8 FaceGeoData27;
	u8 FaceGeoData28;
	u8 FaceGeoData29;
	u8 FaceGeoData30;
	u8 FaceGeoData31;
	u8 FaceGeoData32;
	u8 FaceGeoData33;
	u8 FaceGeoData34;
	u8 FaceGeoData35;
	u8 FaceGeoData36;
	u8 FaceGeoData37;
	u8 FaceGeoData38;
	u8 FaceGeoData39;
	u8 FaceGeoData40;
	u8 FaceGeoData41;
	u8 FaceGeoData42;
	u8 FaceGeoData43;
	u8 FaceGeoData44;
	u8 FaceGeoData45;
	u8 FaceGeoData46;
	u8 FaceGeoData47;
	u8 FaceGeoData48;
	u8 FaceGeoData49;
	u8 FaceGeoData50;
	u8 FaceGeoData51;
	u8 FaceGeoData52;
	u8 FaceGeoData53;
	u8 FaceGeoData54;
	u8 FaceGeoData55;
	u8 FaceGeoData56;
	u8 FaceGeoData57;
	u8 FaceGeoData58;
	u8 FaceGeoData59;
	u8 FaceGeoData60;
	u8 FaceTexData00;
	u8 FaceTexData01;
	u8 FaceTexData02;
	u8 FaceTexData03;
	u8 FaceTexData04;
	u8 FaceTexData05;
	u8 FaceTexData06;
	u8 FaceTexData07;
	u8 FaceTexData08;
	u8 FaceTexData09;
	u8 FaceTexData10;
	u8 FaceTexData11;
	u8 FaceTexData12;
	u8 FaceTexData13;
	u8 FaceTexData14;
	u8 FaceTexData15;
	u8 FaceTexData16;
	u8 FaceTexData17;
	u8 FaceTexData18;
	u8 FaceTexData19;
	u8 FaceTexData20;
	u8 FaceTexData21;
	u8 FaceTexData22;
	u8 FaceTexData23;
	u8 FaceTexData24;
	u8 FaceTexData25;
	u8 FaceTexData26;
	u8 FaceTexData27;
	u8 FaceTexData28;
	u8 FaceTexData29;
	u8 FaceTexData30;
	u8 FaceTexData31;
	u8 FaceTexData32;
	u8 FaceTexData33;
	u8 FaceTexData34;
	u8 FaceTexData35;
	u8 FaceGeoAsymData00;
	u8 FaceGeoAsymData01;
	u8 FaceGeoAsymData02;
	u8 FaceGeoAsymData03;
	u8 FaceGeoAsymData04;
	u8 FaceGeoAsymData05;
	u8 FaceGeoAsymData06;
	u8 FaceGeoAsymData07;
	u8 FaceGeoAsymData08;
	u8 FaceGeoAsymData09;
	u8 FaceGeoAsymData10;
	u8 FaceGeoAsymData11;
	u8 FaceGeoAsymData12;
	u8 FaceGeoAsymData13;
	u8 FaceGeoAsymData14;
	u8 FaceGeoAsymData15;
	u8 FaceGeoAsymData16;
	u8 FaceGeoAsymData17;
	u8 FaceGeoAsymData18;
	u8 FaceGeoAsymData19;
	u8 FaceGeoAsymData20;
	u8 FaceGeoAsymData21;
	u8 FaceGeoAsymData22;
	u8 FaceGeoAsymData23;
	u8 FaceGeoAsymData24;
	u8 FaceGeoAsymData25;
	u8 FaceGeoAsymData26;
	u8 FaceGeoAsymData27;
	u8 FaceGeoAsymData28;
	u8 FaceGeoAsymData29;
	u8 FaceGeoAsymData30;
	u8 FaceGeoAsymData31;
	dummy8 Padding[18];
};
typedef struct _FACE_PARAM_ST FACE_PARAM_ST;

struct _FACE_RANGE_PARAM_ST {
	dummy8 Unknown[196];
	f32 FaceGeoData00;
	f32 FaceGeoData01;
	f32 FaceGeoData02;
	f32 FaceGeoData03;
	f32 FaceGeoData04;
	f32 FaceGeoData05;
	f32 FaceGeoData06;
	f32 FaceGeoData07;
	f32 FaceGeoData08;
	f32 FaceGeoData09;
	f32 FaceGeoData10;
	f32 FaceGeoData11;
	f32 FaceGeoData12;
	f32 FaceGeoData13;
	f32 FaceGeoData14;
	f32 FaceGeoData15;
	f32 FaceGeoData16;
	f32 FaceGeoData17;
	f32 FaceGeoData18;
	f32 FaceGeoData19;
	f32 FaceGeoData20;
	f32 FaceGeoData21;
	f32 FaceGeoData22;
	f32 FaceGeoData23;
	f32 FaceGeoData24;
	f32 FaceGeoData25;
	f32 FaceGeoData26;
	f32 FaceGeoData27;
	f32 FaceGeoData28;
	f32 FaceGeoData29;
	f32 FaceGeoData30;
	f32 FaceGeoData31;
	f32 FaceGeoData32;
	f32 FaceGeoData33;
	f32 FaceGeoData34;
	f32 FaceGeoData35;
	f32 FaceGeoData36;
	f32 FaceGeoData37;
	f32 FaceGeoData38;
	f32 FaceGeoData39;
	f32 FaceGeoData40;
	f32 FaceGeoData41;
	f32 FaceGeoData42;
	f32 FaceGeoData43;
	f32 FaceGeoData44;
	f32 FaceGeoData45;
	f32 FaceGeoData46;
	f32 FaceGeoData47;
	f32 FaceGeoData48;
	f32 FaceGeoData49;
	f32 FaceGeoData50;
	f32 FaceGeoData51;
	f32 FaceGeoData52;
	f32 FaceGeoData53;
	f32 FaceGeoData54;
	f32 FaceGeoData55;
	f32 FaceGeoData56;
	f32 FaceGeoData57;
	f32 FaceGeoData58;
	f32 FaceGeoData59;
	f32 FaceGeoData60;
	f32 FaceTexData00;
	f32 FaceTexData01;
	f32 FaceTexData02;
	f32 FaceTexData03;
	f32 FaceTexData04;
	f32 FaceTexData05;
	f32 FaceTexData06;
	f32 FaceTexData07;
	f32 FaceTexData08;
	f32 FaceTexData09;
	f32 FaceTexData10;
	f32 FaceTexData11;
	f32 FaceTexData12;
	f32 FaceTexData13;
	f32 FaceTexData14;
	f32 FaceTexData15;
	f32 FaceTexData16;
	f32 FaceTexData17;
	f32 FaceTexData18;
	f32 FaceTexData19;
	f32 FaceTexData20;
	f32 FaceTexData21;
	f32 FaceTexData22;
	f32 FaceTexData23;
	f32 FaceTexData24;
	f32 FaceTexData25;
	f32 FaceTexData26;
	f32 FaceTexData27;
	f32 FaceTexData28;
	f32 FaceTexData29;
	f32 FaceTexData30;
	f32 FaceTexData31;
	f32 FaceTexData32;
	f32 FaceTexData33;
	f32 FaceTexData34;
	f32 FaceTexData35;
};
typedef struct _FACE_RANGE_PARAM_ST FACE_RANGE_PARAM_ST;

struct _FOOT_SFX_PARAM_ST {
	u32 sfxId_00;
	u32 sfxId_01;
	u32 sfxId_02;
	u32 sfxId_03;
	u32 sfxId_04;
	u32 sfxId_05;
	u32 sfxId_06;
	u32 sfxId_07;
	u32 sfxId_08;
	u32 sfxId_09;
	u32 sfxId_10;
	u32 sfxId_11;
	u32 sfxId_12;
	u32 sfxId_13;
	u32 sfxId_14;
	u32 sfxId_15;
	u32 sfxId_16;
	u32 sfxId_17;
	u32 sfxId_18;
	u32 sfxId_19;
	u32 sfxId_20;
	u32 sfxId_21;
	u32 sfxId_22;
	u32 sfxId_23;
	u32 sfxId_24;
	u32 sfxId_25;
	u32 sfxId_26;
	u32 sfxId_27;
	u32 sfxId_28;
	u32 sfxId_29;
	u32 sfxId_30;
	u32 sfxId_31;
	u32 sfxId_32;
	u32 sfxId_33;
	u32 sfxId_34;
	u32 sfxId_35;
	u32 sfxId_36;
	u32 sfxId_37;
	u32 sfxId_38;
	u32 sfxId_39;
	u32 sfxId_40;
	u32 sfxId_41;
	u32 sfxId_42;
	u32 sfxId_43;
	u32 sfxId_44;
	u32 sfxId_45;
	u32 sfxId_46;
	u32 sfxId_47;
	u32 sfxId_48;
	u32 sfxId_49;
	u32 sfxId_50;
	u32 sfxId_51;
	u32 sfxId_52;
	u32 sfxId_53;
	u32 sfxId_54;
	u32 sfxId_55;
	u32 sfxId_56;
	u32 sfxId_57;
	u32 sfxId_58;
	u32 sfxId_59;
	u32 sfxId_60;
	u32 sfxId_61;
	u32 sfxId_62;
	u32 sfxId_63;
	u32 sfxId_64;
	u32 sfxId_65;
	u32 sfxId_66;
	u32 sfxId_67;
	u32 sfxId_68;
	u32 sfxId_69;
	u32 sfxId_70;
	u32 sfxId_71;
	u32 sfxId_72;
	u32 sfxId_73;
	u32 sfxId_74;
	u32 sfxId_75;
	u32 sfxId_76;
	u32 sfxId_77;
	u32 sfxId_78;
	u32 sfxId_79;
	u32 sfxId_80;
	u32 sfxId_81;
	u32 sfxId_82;
	u32 sfxId_83;
	u32 sfxId_84;
	u32 sfxId_85;
	u32 sfxId_86;
	u32 sfxId_87;
	u32 sfxId_88;
	u32 sfxId_89;
	u32 sfxId_90;
	u32 sfxId_91;
	u32 sfxId_92;
	u32 sfxId_93;
	u32 sfxId_94;
	u32 sfxId_95;
	u32 sfxId_96;
	u32 sfxId_97;
	u32 sfxId_98;
	u32 sfxId_99;
	u32 sfxId_100;
	u32 sfxId_101;
	u32 sfxId_102;
	u32 sfxId_103;
	u32 sfxId_104;
	u32 sfxId_105;
	u32 sfxId_106;
	u32 sfxId_107;
	u32 sfxId_108;
	u32 sfxId_109;
	u32 sfxId_110;
	u32 sfxId_111;
	u32 sfxId_112;
	u32 sfxId_113;
	u32 sfxId_114;
	u32 sfxId_115;
	u32 sfxId_116;
	u32 sfxId_117;
	u32 sfxId_118;
	u32 sfxId_119;
	u32 sfxId_120;
	u32 sfxId_121;
	u32 sfxId_122;
	u32 sfxId_123;
	u32 sfxId_124;
	u32 sfxId_125;
	u32 sfxId_126;
	u32 sfxId_127;
	u32 sfxId_128;
	u32 sfxId_129;
	u32 sfxId_130;
	u32 sfxId_131;
	u32 sfxId_132;
	u32 sfxId_133;
	u32 sfxId_134;
	u32 sfxId_135;
	u32 sfxId_136;
	u32 sfxId_137;
	u32 sfxId_138;
	u32 sfxId_139;
	u32 sfxId_140;
	u32 sfxId_141;
	u32 sfxId_142;
	u32 sfxId_143;
	u32 sfxId_144;
	u32 sfxId_145;
	u32 sfxId_146;
	u32 sfxId_147;
	u32 sfxId_148;
	u32 sfxId_149;
	u32 sfxId_150;
	u32 sfxId_151;
	u32 sfxId_152;
	u32 sfxId_153;
	u32 sfxId_154;
	u32 sfxId_155;
	u32 sfxId_156;
	u32 sfxId_157;
	u32 sfxId_158;
	u32 sfxId_159;
	u32 sfxId_160;
	u32 sfxId_161;
	u32 sfxId_162;
	u32 sfxId_163;
	u32 sfxId_164;
	u32 sfxId_165;
	u32 sfxId_166;
	u32 sfxId_167;
	u32 sfxId_168;
	u32 sfxId_169;
	u32 sfxId_170;
	u32 sfxId_171;
	u32 sfxId_172;
	u32 sfxId_173;
	u32 sfxId_174;
	u32 sfxId_175;
	u32 sfxId_176;
	u32 sfxId_177;
	u32 sfxId_178;
	u32 sfxId_179;
	u32 sfxId_180;
	u32 sfxId_181;
	u32 sfxId_182;
	u32 sfxId_183;
	u32 sfxId_184;
	u32 sfxId_185;
	u32 sfxId_186;
	u32 sfxId_187;
	u32 sfxId_188;
	u32 sfxId_189;
	u32 sfxId_190;
	u32 sfxId_191;
	u32 sfxId_192;
	u32 sfxId_193;
	u32 sfxId_194;
	u32 sfxId_195;
	u32 sfxId_196;
	u32 sfxId_197;
	u32 sfxId_198;
	u32 sfxId_199;
};
typedef struct _FOOT_SFX_PARAM_ST FOOT_SFX_PARAM_ST;

struct _GAME_AREA_PARAM_ST {
	s32 bonusSoul_single;
	s32 bonusSoul_multi;
	s32 humanityPointCountFlagIdTop;
	s16 humanityDropPoint1;
	s16 humanityDropPoint2;
	s16 humanityDropPoint3;
	s16 humanityDropPoint4;
	s16 humanityDropPoint5;
	s16 humanityDropPoint6;
	s16 humanityDropPoint7;
	s16 humanityDropPoint8;
	s16 humanityDropPoint9;
	s16 humanityDropPoint10;
	s32 soloBreakInPoint_Min;
	s32 soloBreakInPoint_Max;
	dummy8 pad1[8];
};
typedef struct _GAME_AREA_PARAM_ST GAME_AREA_PARAM_ST;

struct _GAME_PROGRESS_PARAM_ST {
	s32 EventFlagId;
	u8 ProgressId;
	dummy8 pad1[11];
};
typedef struct _GAME_PROGRESS_PARAM_ST GAME_PROGRESS_PARAM_ST;

struct _GEMEFFECT_PARAM_ST {
	s32 spEffectId;
	s32 categoryId;
	s32 effectRank;
	s32 rankMin;
	s32 rankMax;
	s32 disposalPrice;
	s16 gemIconIdOffset;
	dummy8 pad1[2];
	s32 spEffectId_forAtk;
};
typedef struct _GEMEFFECT_PARAM_ST GEMEFFECT_PARAM_ST;

struct _GEM_CATEGORY_PARAM_ST {
	s32 SortNo;
	f32 manifestRate;
	s32 directionalId;
	s32 cateGroupId;
	s32 excludeGroupId;
	u8 isNegative: 1;
	u8 enableSlotTypeA: 1;
	u8 enableSlotTypeB: 1;
	u8 enableSlotTypeC: 1;
	u8 enableSlotTypeD: 1;
	u8 enableSlotTypeE: 1;
	u8 enableSlotTypeF: 1;
	u8 holygrailTypeGroup: 1;
	dummy8 pad1[3];
	s32 affinityCateId_0;
	f32 affinityModifyRate_0;
	s32 affinityCateId_1;
	f32 affinityModifyRate_1;
	s32 affinityCateId_2;
	f32 affinityModifyRate_2;
	s32 affinityCateId_3;
	f32 affinityModifyRate_3;
};
typedef struct _GEM_CATEGORY_PARAM_ST GEM_CATEGORY_PARAM_ST;

struct _GEM_DROP_DOPING_PARAM_ST {
	s32 rankMin;
	s32 rankMax;
	s32 normalDistributionAve;
	s32 normalDistributionSigma;
	f32 SlotTypeA;
	f32 SlotTypeB;
	f32 SlotTypeC;
	f32 SlotTypeD;
	f32 SlotTypeE;
	f32 SlotTypeF;
	f32 directionalIdRate_0;
	f32 directionalIdRate_1;
	f32 directionalIdRate_2;
	f32 directionalIdRate_3;
	f32 directionalIdRate_4;
	f32 directionalIdRate_5;
	f32 directionalIdRate_6;
	f32 directionalIdRate_7;
};
typedef struct _GEM_DROP_DOPING_PARAM_ST GEM_DROP_DOPING_PARAM_ST;

struct _GEM_DROP_MODIFY_PARAM_ST {
	f32 slotTypeRateA;
	f32 slotTypeRateB;
	f32 slotTypeRateC;
	f32 slotTypeRateD;
	f32 slotTypeRateE;
	f32 slotTypeRateF;
	f32 directionalIdRate_0;
	f32 directionalIdRate_1;
	f32 directionalIdRate_2;
	f32 directionalIdRate_3;
	f32 directionalIdRate_4;
	f32 directionalIdRate_5;
	f32 directionalIdRate_6;
	f32 directionalIdRate_7;
	s32 affinityCateId_0;
	f32 affinityModifyRate_0;
	s32 affinityCateId_1;
	f32 affinityModifyRate_1;
	s32 affinityCateId_2;
	f32 affinityModifyRate_2;
	s32 affinityCateId_3;
	f32 affinityModifyRate_3;
	f32 manifestRate_0;
	f32 manifestRate_1;
	f32 manifestRate_2;
	f32 manifestRate_3;
	f32 manifestRate_4;
	f32 manifestRate_5;
	f32 negativizeRate_0;
	s32 normalDistributionAve;
	s32 normalDistributionSigma;
};
typedef struct _GEM_DROP_MODIFY_PARAM_ST GEM_DROP_MODIFY_PARAM_ST;

struct _GEM_GEN_PARAM_ST {
	u8 isUnique: 1;
	dummy8 pad[3];
	s32 unk04;
	s32 gemNameIdOffset;
	s32 disableSlotRateModify;
	f32 slotTypeRateA;
	f32 slotTypeRateB;
	f32 slotTypeRateC;
	f32 slotTypeRateD;
	f32 slotTypeRateE;
	f32 slotTypeRateF;
	u8 gemRankDoping;
	dummy8 pad1[3];
	s32 gemeffectGenParamType_0;
	s32 gemeffectGenParam_0;
	f32 manifestRate_0;
	f32 negativizeRate_0;
	s32 gemeffectGenParamType_1;
	s32 gemeffectGenParam_1;
	f32 manifestRate_1;
	f32 negativizeRate_1;
	s32 gemeffectGenParamType_2;
	s32 gemeffectGenParam_2;
	f32 manifestRate_2;
	f32 negativizeRate_2;
	s32 gemeffectGenParamType_3;
	s32 gemeffectGenParam_3;
	f32 manifestRate_3;
	f32 negativizeRate_3;
	s32 gemeffectGenParamType_4;
	s32 gemeffectGenParam_4;
	f32 manifestRate_4;
	f32 negativizeRate_4;
	s32 gemeffectGenParamType_5;
	s32 gemeffectGenParam_5;
	f32 manifestRate_5;
	f32 negativizeRate_5;
};
typedef struct _GEM_GEN_PARAM_ST GEM_GEN_PARAM_ST;

struct _HIT_EFFECT_SE_PARAM_ST {
	s32 Iron_Slash_S;
	s32 Iron_Slash_L;
	s32 Iron_Slash_LL;
	s32 Iron_Thrust_S;
	s32 Iron_Thrust_L;
	s32 Iron_Thrust_LL;
	s32 Iron_Blow_S;
	s32 Iron_Blow_L;
	s32 Iron_Blow_LL;
	s32 Fire_Slash_S;
	s32 Fire_Slash_L;
	s32 Fire_Slash_LL;
	s32 Fire_Thrust_S;
	s32 Fire_Thrust_L;
	s32 Fire_Thrust_LL;
	s32 Fire_Blow_S;
	s32 Fire_Blow_L;
	s32 Fire_Blow_LL;
	s32 Wood_Slash_S;
	s32 Wood_Slash_L;
	s32 Wood_Slash_LL;
	s32 Wood_Thrust_S;
	s32 Wood_Thrust_L;
	s32 Wood_Thrust_LL;
	s32 Wood_Blow_S;
	s32 Wood_Blow_L;
	s32 Wood_Blow_LL;
	s32 Body_Slash_S;
	s32 Body_Slash_L;
	s32 Body_Slash_LL;
	s32 Body_Thrust_S;
	s32 Body_Thrust_L;
	s32 Body_Thrust_LL;
	s32 Body_Blow_S;
	s32 Body_Blow_L;
	s32 Body_Blow_LL;
	s32 Eclipse_Slash_S;
	s32 Eclipse_Slash_L;
	s32 Eclipse_Slash_LL;
	s32 Eclipse_Thrust_S;
	s32 Eclipse_Thrust_L;
	s32 Eclipse_Thrust_LL;
	s32 Eclipse_Blow_S;
	s32 Eclipse_Blow_L;
	s32 Eclipse_Blow_LL;
	s32 Energy_Slash_S;
	s32 Energy_Slash_L;
	s32 Energy_Slash_LL;
	s32 Energy_Thrust_S;
	s32 Energy_Thrust_L;
	s32 Energy_Thrust_LL;
	s32 Energy_Blow_S;
	s32 Energy_Blow_L;
	s32 Energy_Blow_LL;
	s32 None_Slash_S;
	s32 None_Slash_L;
	s32 None_Slash_LL;
	s32 None_Thrust_S;
	s32 None_Thrust_L;
	s32 None_Thrust_LL;
	s32 None_Blow_S;
	s32 None_Blow_L;
	s32 None_Blow_LL;
	s32 Dmy1_Slash_S;
	s32 Dmy1_Slash_L;
	s32 Dmy1_Slash_LL;
	s32 Dmy1_Thrust_S;
	s32 Dmy1_Thrust_L;
	s32 Dmy1_Thrust_LL;
	s32 Dmy1_Blow_S;
	s32 Dmy1_Blow_L;
	s32 Dmy1_Blow_LL;
	s32 Dmy2_Slash_S;
	s32 Dmy2_Slash_L;
	s32 Dmy2_Slash_LL;
	s32 Dmy2_Thrust_S;
	s32 Dmy2_Thrust_L;
	s32 Dmy2_Thrust_LL;
	s32 Dmy2_Blow_S;
	s32 Dmy2_Blow_L;
	s32 Dmy2_Blow_LL;
	s32 Dmy3_Slash_S;
	s32 Dmy3_Slash_L;
	s32 Dmy3_Slash_LL;
	s32 Dmy3_Thrust_S;
	s32 Dmy3_Thrust_L;
	s32 Dmy3_Thrust_LL;
	s32 Dmy3_Blow_S;
	s32 Dmy3_Blow_L;
	s32 Dmy3_Blow_LL;
	s32 Maggot_Slash_S;
	s32 Maggot_Slash_L;
	s32 Maggot_Slash_LL;
	s32 Maggot_Thrust_S;
	s32 Maggot_Thrust_L;
	s32 Maggot_Thrust_LL;
	s32 Maggot_Blow_S;
	s32 Maggot_Blow_L;
	s32 Maggot_Blow_LL;
	s32 Wax_Slash_S;
	s32 Wax_Slash_L;
	s32 Wax_Slash_LL;
	s32 Wax_Thrust_S;
	s32 Wax_Thrust_L;
	s32 Wax_Thrust_LL;
	s32 Wax_Blow_S;
	s32 Wax_Blow_L;
	s32 Wax_Blow_LL;
	s32 FireFlame_Slash_S;
	s32 FireFlame_Slash_L;
	s32 FireFlame_Slash_LL;
	s32 FireFlame_Thrust_S;
	s32 FireFlame_Thrust_L;
	s32 FireFlame_Thrust_LL;
	s32 FireFlame_Blow_S;
	s32 FireFlame_Blow_L;
	s32 FireFlame_Blow_LL;
	s32 EclipseGas_Slash_S;
	s32 EclipseGas_Slash_L;
	s32 EclipseGas_Slash_LL;
	s32 EclipseGas_Thrust_S;
	s32 EclipseGas_Thrust_L;
	s32 EclipseGas_Thrust_LL;
	s32 EclipseGas_Blow_S;
	s32 EclipseGas_Blow_L;
	s32 EclipseGas_Blow_LL;
	s32 EnergyStrong_Slash_S;
	s32 EnergyStrong_Slash_L;
	s32 EnergyStrong_Slash_LL;
	s32 EnergyStrong_Thrust_S;
	s32 EnergyStrong_Thrust_L;
	s32 EnergyStrong_Thrust_LL;
	s32 EnergyStrong_Blow_S;
	s32 EnergyStrong_Blow_L;
	s32 EnergyStrong_Blow_LL;
	dummy8 reserve[100];
};
typedef struct _HIT_EFFECT_SE_PARAM_ST HIT_EFFECT_SE_PARAM_ST;

struct _HIT_EFFECT_SFX_CONCEPT_PARAM_ST {
	s16 atkIron_1;
	s16 atkIron_2;
	s16 atkLeather_1;
	s16 atkLeather_2;
	s16 atkWood_1;
	s16 atkWood_2;
	s16 atkBody_1;
	s16 atkBody_2;
	s16 atkStone_1;
	s16 atkStone_2;
	dummy8 pad[4];
	s16 atkNone_1;
	s16 atkNone_2;
	dummy8 reserve[52];
};
typedef struct _HIT_EFFECT_SFX_CONCEPT_PARAM_ST HIT_EFFECT_SFX_CONCEPT_PARAM_ST;

struct _HIT_EFFECT_SFX_PARAM_ST {
	s32 Slash_Normal;
	s32 Slash_S;
	s32 Slash_L;
	s32 Slash_Specific1;
	s32 Slash_Specific2;
	s32 Blow_Normal;
	s32 Blow_S;
	s32 Blow_L;
	s32 Blow_Specific1;
	s32 Blow_Specific2;
	s32 Thrust_Normal;
	s32 Thrust_S;
	s32 Thrust_L;
	s32 Thrust_Specific1;
	s32 Thrust_Specific2;
	s32 Neutral_Normal;
	s32 Neutral_S;
	s32 Neutral_L;
	s32 Neutral_Specific1;
	s32 Neutral_Specific2;
};
typedef struct _HIT_EFFECT_SFX_PARAM_ST HIT_EFFECT_SFX_PARAM_ST;

struct _HIT_MTRL_PARAM_ST {
	f32 aiVolumeRate;
	s32 spEffectIdOnHit0;
	s32 spEffectIdOnHit1;
	u8 footEffectHeightType: 2;
	u8 footEffectDirType: 2;
	u8 floorHeightType: 2;
	u8 disableFallDamage: 1;
	u8 isHardnessForSoundReverb: 1;
	u8 hardnessType;
	u8 replaceMateiralId_Rain;
	u8 pad2;
	s32 spEffectId_forWet;
	s32 spEffectIdOnHit0_ClearCount_2;
	s32 spEffectIdOnHit0_ClearCount_3;
	s32 spEffectIdOnHit0_ClearCount_4;
	s32 spEffectIdOnHit0_ClearCount_5;
	s32 spEffectIdOnHit0_ClearCount_6;
	s32 spEffectIdOnHit0_ClearCount_7;
	s32 spEffectIdOnHit0_ClearCount_8;
	s32 spEffectIdOnHit1_ClearCount_2;
	s32 spEffectIdOnHit1_ClearCount_3;
	s32 spEffectIdOnHit1_ClearCount_4;
	s32 spEffectIdOnHit1_ClearCount_5;
	s32 spEffectIdOnHit1_ClearCount_6;
	s32 spEffectIdOnHit1_ClearCount_7;
	s32 spEffectIdOnHit1_ClearCount_8;
	dummy8 pad1[20];
};
typedef struct _HIT_MTRL_PARAM_ST HIT_MTRL_PARAM_ST;

struct _ITEMLOT_PARAM_ST {
	s32 ItemLotId1;
	s32 ItemLotId2;
	s32 ItemLotId3;
	s32 ItemLotId4;
	s32 ItemLotId5;
	s32 ItemLotId6;
	s32 ItemLotId7;
	s32 ItemLotId8;
	u32 LotItemCategory01;
	u32 LotItemCategory02;
	u32 LotItemCategory03;
	u32 LotItemCategory04;
	u32 LotItemCategory05;
	u32 LotItemCategory06;
	u32 LotItemCategory07;
	u32 LotItemCategory08;
	s16 LotItemBasePoint01;
	s16 LotItemBasePoint02;
	s16 LotItemBasePoint03;
	s16 LotItemBasePoint04;
	s16 LotItemBasePoint05;
	s16 LotItemBasePoint06;
	s16 LotItemBasePoint07;
	s16 LotItemBasePoint08;
	s16 cumulateLotPoint01;
	s16 cumulateLotPoint02;
	s16 cumulateLotPoint03;
	s16 cumulateLotPoint04;
	s16 cumulateLotPoint05;
	s16 cumulateLotPoint06;
	s16 cumulateLotPoint07;
	s16 cumulateLotPoint08;
	s32 GetItemFlagId01;
	s32 GetItemFlagId02;
	s32 GetItemFlagId03;
	s32 GetItemFlagId04;
	s32 GetItemFlagId05;
	s32 GetItemFlagId06;
	s32 GetItemFlagId07;
	s32 GetItemFlagId08;
	s32 getItemFlagId;
	s32 cumulateNumFlagId;
	u8 cumulateNumMax;
	u8 LotItemRarity;
	u8 LotItemNum1;
	u8 LotItemNum2;
	u8 LotItemNum3;
	u8 LotItemNum4;
	u8 LotItemNum5;
	u8 LotItemNum6;
	u8 LotItemNum7;
	u8 LotItemNum8;
	u8 EnableLuck01: 1;
	u8 EnableLuck02: 1;
	u8 EnableLuck03: 1;
	u8 EnableLuck04: 1;
	u8 EnableLuck05: 1;
	u8 EnableLuck06: 1;
	u8 EnableLuck07: 1;
	u8 EnableLuck08: 1;
	u8 cumulateReset01: 1;
	u8 cumulateReset02: 1;
	u8 cumulateReset03: 1;
	u8 cumulateReset04: 1;
	u8 cumulateReset05: 1;
	u8 cumulateReset06: 1;
	u8 cumulateReset07: 1;
	u8 cumulateReset08: 1;
	s8 ClearCount;
	dummy8 pad1[3];
};
typedef struct _ITEMLOT_PARAM_ST ITEMLOT_PARAM_ST;

struct _KNOCKBACK_PARAM_ST {
	f32 damage_Min_ContTime;
	f32 damage_S_ContTime;
	f32 damage_M_ContTime;
	f32 damage_L_ContTime;
	f32 damage_BlowS_ContTime;
	f32 damage_BlowM_ContTime;
	f32 damage_Strike_ContTime;
	f32 damage_Uppercut_ContTime;
	f32 damage_Push_ContTime;
	f32 damage_Breath_ContTime;
	f32 damage_HeadShot_ContTime;
	f32 guard_S_ContTime;
	f32 guard_L_ContTime;
	f32 guard_LL_ContTime;
	f32 guardBrake_ContTime;
	f32 damage_min_decTime;
	f32 damage_S_decTime;
	f32 damage_M_decTime;
	f32 damage_L_decTime;
	f32 damage_BlowS_decTime;
	f32 damage_BlowM_decTime;
	f32 damage_Strike_decTime;
	f32 damage_Uppercut_DecTime;
	f32 damage_Push_DecTime;
	f32 damage_Breath_DecTime;
	f32 damage_HeadShot_DecTime;
	f32 guard_S_DecTime;
	f32 guard_L_DecTime;
	f32 guard_LL_DecTime;
	f32 guardBrake_DecTime;
	dummy8 pad1[8];
};
typedef struct _KNOCKBACK_PARAM_ST KNOCKBACK_PARAM_ST;

struct _KNOWLEDGE_LOADSCREEN_ITEM_PARAM_ST {
	u32 LoadscreenCategoryId;
	s32 KnowledgeId;
	dummy8 pad1[8];
};
typedef struct _KNOWLEDGE_LOADSCREEN_ITEM_PARAM_ST KNOWLEDGE_LOADSCREEN_ITEM_PARAM_ST;

struct _LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST {
	f32 Lv00;
	f32 Lv01;
	f32 Lv02;
	f32 Lv03;
	f32 Lv04;
	f32 Lv05;
	f32 Lv06;
	f32 Lv07;
	f32 Lv08;
	f32 Lv09;
	f32 Lv10;
	f32 Lv11;
	f32 Lv12;
	f32 Lv13;
	f32 Lv14;
	f32 Lv15;
	f32 Lv16;
	f32 Lv17;
	f32 Lv18;
	f32 Lv19;
	f32 Lv20;
	dummy8 reserve[44];
};
typedef struct _LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST;

struct _LOAD_BALANCER_PARAM_ST {
	f32 Unk1;
	f32 Unk2;
	s32 Unk3;
	s32 Unk4;
	s32 Unk5;
	s32 Unk6;
	u8 LoadBalancerVal0;
	u8 LoadBalancerVal1;
	u8 LoadBalancerVal2;
	u8 LoadBalancerVal3;
	u8 LoadBalancerVal4;
	u8 LoadBalancerVal5;
	u8 LoadBalancerVal6;
	u8 LoadBalancerVal7;
	u8 LoadBalancerVal8;
	u8 LoadBalancerVal9;
	u8 LoadBalancerVal10;
	u8 LoadBalancerVal11;
	u8 LoadBalancerVal12;
	u8 LoadBalancerVal13;
	u8 LoadBalancerVal14;
	u8 LoadBalancerVal15;
	u8 LoadBalancerVal16;
	u8 LoadBalancerVal17;
	dummy8 pad1[38];
};
typedef struct _LOAD_BALANCER_PARAM_ST LOAD_BALANCER_PARAM_ST;

struct _LOCK_CAM_PARAM_ST {
	f32 camDistTarget;
	f32 rotRangeMinX;
	f32 lockRotXShiftRatio;
	f32 chrOrgOffset_Y;
	f32 chrLockRangeMaxRadius;
	f32 camFovY;
	f32 chrLockRangeMaxRadius_forD;
	f32 chrLockRangeMaxRadius_forPD;
	f32 closeMaxHeight;
	f32 closeMinHeight;
	f32 closeAngRange;
	f32 closeMaxRadius;
	f32 closeMaxRadius_forD;
	f32 closeMaxRadius_forPD;
	f32 bulletMaxRadius;
	f32 bulletMaxRadius_forD;
	f32 bulletMaxRadius_forPD;
	f32 bulletAngRange;
	dummy8 pad1[28];
};
typedef struct _LOCK_CAM_PARAM_ST LOCK_CAM_PARAM_ST;

struct _LOD_BANK {
	f32 lv01_BorderDist;
	f32 lv01_PlayDist;
	f32 lv12_BorderDist;
	f32 lv12_PlayDist;
	u8 textureLod;
	dummy8 pad1[3];
	f32 lv23_BorderDist;
	f32 lv23_PlayDist;
	f32 lv34_BorderDist;
	f32 lv34_PlayDist;
	f32 lv45_BorderDist;
	f32 lv45_PlayDist;
	u8 DistanceScaleId;
	dummy8 pad2[19];
};
typedef struct _LOD_BANK LOD_BANK;

struct _MAGIC_PARAM_ST {
	s32 yesNoDialogMessageId;
	s32 limitCancelSpEffectId;
	s16 sortId;
	u8 requirementLuck;
	u8 aiNotifyType;
	s16 refIdFpCost1;
	s16 refIdSpCost1;
	s16 iconId;
	s16 behaviorId;
	s16 mtrlItemId;
	s16 replaceMagicId;
	s16 maxQuantity;
	u8 heroPoint;
	u8 overDexterity;
	u8 sfxVariationId;
	u8 slotLength;
	u8 requirementIntellect;
	u8 requirementFaith;
	u8 analogDexterityMin;
	u8 analogDexterityMax;
	u8 ezStateBehaviorType;
	u8 refCategory1;
	u8 spEffectCategory;
	u8 refType;
	u8 menuType;
	u8 refCategory4;
	s16 hasSpEffectType;
	u8 unknown1: 1;
	u8 spellchange1: 1;
	u8 spellchange2: 1;
	u8 unknown2: 1;
	u8 unknown3: 1;
	u8 unknown4: 1;
	u8 unknown5: 1;
	u8 unknown6: 1;
	u8 enableMulti: 1;
	u8 enableMultOnly: 1;
	u8 isEnchant: 1;
	u8 isShieldEnchant: 1;
	u8 enable_live: 1;
	u8 enable_gray: 1;
	u8 enable_white: 1;
	u8 enable_black: 1;
	u8 disable_offline: 1;
	u8 vowType1: 1;
	u8 vowType2: 1;
	u8 vowType3: 1;
	u8 vowType4: 1;
	u8 vowType5: 1;
	u8 vowType6: 1;
	u8 vowType7: 1;
	u8 VowType8: 1;
	u8 VowType9: 1;
	u8 VowType10: 1;
	u8 VowType11: 1;
	u8 VowType12: 1;
	u8 VowType13: 1;
	u8 VowType14: 1;
	u8 VowType15: 1;
	u8 Unk7;
	u8 Unk8;
	s32 CastSfx1;
	s32 CastSfx2;
	s32 CastSfx3;
	s32 toughnessCorrectRate;
	u8 ReplacementStatusType;
	s8 ReplacementStatus1;
	s8 ReplacementStatus2;
	s8 ReplacementStatus3;
	s8 ReplacementStatus4;
	u8 refCategory2;
	s16 refIdSpCost4;
	s32 magicId0;
	s32 magicId1;
	s32 magicId2;
	s32 magicId3;
	s16 refIdFpCost2;
	s16 refIdSpCost2;
	u8 Unk10;
	u8 refCategory3;
	s16 refIdFpCost4;
	s16 refIdFpCost3;
	s16 refIdSpCost3;
	s32 refId1;
	s32 refId2;
	s32 refId3;
	s32 refId4;
	dummy8 pad1[12];
};
typedef struct _MAGIC_PARAM_ST MAGIC_PARAM_ST;

struct _MAP_MIMICRY_ESTABLISHMENT_PARAM_ST {
	f32 mimicryEstablishment0;
	f32 mimicryEstablishment1;
	f32 mimicryEstablishment2;
	s32 mimicryBeginSfxId0;
	s32 mimicrySfxId0;
	s32 mimicryEndSfxId0;
	s32 mimicryBeginSfxId1;
	s32 mimicrySfxId1;
	s32 mimicryEndSfxId1;
	s32 mimicryBeginSfxId2;
	s32 mimicrySfxId2;
	s32 mimicryEndSfxId2;
	dummy8 pad1[16];
};
typedef struct _MAP_MIMICRY_ESTABLISHMENT_PARAM_ST MAP_MIMICRY_ESTABLISHMENT_PARAM_ST;

struct _MENUPROPERTY_LAYOUT {
	fixstr LayoutPath[16];
	s32 PropertyID;
	s32 CaptionTextID;
	s32 HelpTextID;
	dummy8 pad1[4];
};
typedef struct _MENUPROPERTY_LAYOUT MENUPROPERTY_LAYOUT;

struct _MENUPROPERTY_SPEC {
	s32 CaptionTextID;
	s32 IconID;
	s32 RequiredPropertyID;
	u8 CompareType;
	u8 RequiredPropertyFormatId;
	fixstrW AdhocCaption[9];
};
typedef struct _MENUPROPERTY_SPEC MENUPROPERTY_SPEC;

struct _MENU_OFFSCR_REND_PARAM_ST {
	f32 camAtPosX;
	f32 camAtPosY;
	f32 camAtPosZ;
	f32 camDist;
	f32 camRotX;
	f32 camRotY;
	f32 camFov;
	f32 camDistMin;
	f32 camDistMax;
	f32 camRotXMin;
	f32 camRotXMax;
	u32 GparamID;
	dummy8 pad2[16];
};
typedef struct _MENU_OFFSCR_REND_PARAM_ST MENU_OFFSCR_REND_PARAM_ST;

struct _MENU_PARAM_COLOR_TABLE_ST {
	u8 color_R;
	u8 color_G;
	u8 color_B;
	u8 color_A;
};
typedef struct _MENU_PARAM_COLOR_TABLE_ST MENU_PARAM_COLOR_TABLE_ST;

struct _MENU_VALUE_TABLE_SPEC {
	s32 value;
	s32 textId;
	u8 compareType;
	dummy8 pad1[3];
};
typedef struct _MENU_VALUE_TABLE_SPEC MENU_VALUE_TABLE_SPEC;

struct _MODEL_SFX_PARAM_ST {
	s32 sfxId_0;
	s32 dmypolyId_0;
	dummy8 reserve_0[8];
	s32 sfxId_1;
	s32 dmypolyId_1;
	dummy8 reserve_1[8];
	s32 sfxId_2;
	s32 dmypolyId_2;
	dummy8 reserve_2[8];
	s32 sfxId_3;
	s32 dmypolyId_3;
	dummy8 reserve_3[8];
	s32 sfxId_4;
	s32 dmypolyId_4;
	dummy8 reserve_4[8];
	s32 sfxId_5;
	s32 dmypolyId_5;
	dummy8 reserve_5[8];
	s32 sfxId_6;
	s32 dmypolyId_6;
	dummy8 reserve_6[8];
	s32 sfxId_7;
	s32 dmypolyId_7;
	dummy8 reserve_7[8];
};
typedef struct _MODEL_SFX_PARAM_ST MODEL_SFX_PARAM_ST;

struct _MOVE_PARAM_ST {
	s32 stayId;
	s32 walkF;
	s32 walkB;
	s32 walkL;
	s32 walkR;
	s32 dashF;
	s32 dashB;
	s32 dashL;
	s32 dashR;
	s32 superDash;
	s32 escapeF;
	s32 escapeB;
	s32 escapeL;
	s32 escapeR;
	s32 turnL;
	s32 trunR;
	s32 largeTurnL;
	s32 largeTurnR;
	s32 stepMove;
	s32 flyStay;
	s32 flyWalkF;
	s32 flyWalkFL;
	s32 flyWalkFR;
	s32 flyWalkFL2;
	s32 flyWalkFR2;
	s32 flyDashF;
	s32 flyDashFL;
	s32 flyDashFR;
	s32 flyDashFL2;
	s32 flyDashFR2;
	s32 dashEscapeF;
	s32 dashEscapeB;
	s32 dashEscapeL;
	s32 dashEscapeR;
	s32 analogMoveParamId;
	u8 turnNoAnimAngle;
	u8 turn45Angle;
	u8 turn90Angle;
	u8 turnWaitNoAnimAngle;
};
typedef struct _MOVE_PARAM_ST MOVE_PARAM_ST;

struct _MULTI_ESTUS_FLASK_BONUS_PARAM_ST {
	u8 host;
	u8 WhiteGhost_None;
	u8 WhiteGhost_Umbasa;
	u8 WhiteGhost_Berserker;
	u8 BlackGhost_None_Sign;
	u8 BlackGhost_Umbasa_Sign;
	u8 BlackGhost_Berserker_Sign;
	u8 BlackGhost_None_Invade;
	u8 BlackGhost_Umbasa_Invade;
	u8 BlackGhost_Berserker_Invade;
	u8 RedHunter1;
	u8 RedHunter2;
	u8 GuardianOfForest;
	u8 GuardianOfAnor;
	u8 BattleRoyal;
	u8 YellowMonk;
	dummy8 pad4[4];
};
typedef struct _MULTI_ESTUS_FLASK_BONUS_PARAM_ST MULTI_ESTUS_FLASK_BONUS_PARAM_ST;

struct _MULTI_PLAY_CORRECTION_PARAM_ST {
	s32 client1SpEffectId;
	s32 client2SpEffectId;
	s32 client3SpEffectId;
	s32 bOverrideSpEffect;
	dummy8 pad1[16];
};
typedef struct _MULTI_PLAY_CORRECTION_PARAM_ST MULTI_PLAY_CORRECTION_PARAM_ST;

struct _MULTI_SOUL_BONUS_RATE_PARAM_ST {
	f32 soulMultiplierRate0;
	f32 soulMultiplierRate1;
	f32 soulMultiplierRate2;
	f32 soulMultiplierRate3;
	f32 soulMultiplierRate4;
	f32 soulMultiplierRate5;
	f32 soulMultiplierRate6;
	f32 soulMultiplierRate7;
	f32 soulMultiplierRate8;
	f32 soulMultiplierRate9;
	f32 soulMultiplierRate10;
	f32 soulMultiplierRate11;
	f32 soulMultiplierRate12;
	f32 soulMultiplierRate13;
	f32 soulMultiplierRate14;
	f32 soulMultiplierRate15;
	dummy8 pad1[4];
};
typedef struct _MULTI_SOUL_BONUS_RATE_PARAM_ST MULTI_SOUL_BONUS_RATE_PARAM_ST;

struct _NETWORK_AREA_PARAM_ST {
	f32 LimitationTime0;
	f32 LimitationTime1;
	f32 LimitationTime2;
	dummy8 pad1[12];
	u8 enableBloodstain: 1;
	u8 enableBloodMessage: 1;
	u8 enableGhost: 1;
	u8 enableMultiPlay: 1;
	u8 enableRingSearch: 1;
	u8 enableBreakInSearch: 1;
	u8 unkb4: 1;
	u8 unkb5: 1;
	dummy8 pad2[3];
};
typedef struct _NETWORK_AREA_PARAM_ST NETWORK_AREA_PARAM_ST;

struct _NETWORK_MSG_PARAM_ST {
	u16 MsgType0;
	u8 MsgType2;
	u8 pad2;
	s32 MsgId0;
	s32 MsgId1;
	s32 MsgId2;
	s32 MsgId3;
	s32 MsgId4;
	s32 MsgId5;
	s32 MsgId6;
	s32 MsgId7;
	s32 MsgId8;
	s32 MsgId9;
	s32 MsgId10;
	s32 MsgId11;
	s32 MsgId12;
	s32 MsgId13;
	s32 MsgId14;
	s32 MsgId15;
	s32 MsgId16;
	s32 MsgId17;
	s32 MsgId18;
	s32 MsgId19;
	s32 MsgId20;
	s32 MsgId21;
	s32 MsgId22;
	dummy8 pad1[48];
};
typedef struct _NETWORK_MSG_PARAM_ST NETWORK_MSG_PARAM_ST;

struct _NETWORK_PARAM_ST {
	f32 signVerticalOffset;
	f32 maxSignPosCorrectionRange;
	f32 summonTimeoutTime;
	dummy8 pad_0[4];
	f32 signPuddleActiveMessageIntervalSec;
	f32 keyGuideHeight_0;
	f32 reloadSignIntervalTime1;
	f32 reloadSignIntervalTime2;
	u32 reloadSignTotalCount_0;
	u32 reloadSignCellCount_0;
	f32 updateSignIntervalTime;
	f32 basicExclusiveRange_0;
	f32 basicExclusiveHeight_0;
	f32 previewChrWaitingTime;
	f32 signVisibleRange_0;
	u32 cellGroupHorizontalRange_0;
	u32 cellGroupTopRange_0;
	u32 cellGroupBottomRange_0;
	f32 minWhitePhantomLimitTimeScale;
	f32 minSmallPhantomLimitTimeScale;
	f32 whiteKeywordLimitTimeScale;
	f32 smallKeywordLimitTimeScale;
	f32 blackKeywordLimitTimeScale;
	f32 dragonKeywordLimitTimeScale;
	u32 singGetMax;
	f32 signDownloadSpan;
	f32 signUpdateSpan;
	dummy8 signPad[4];
	u32 maxBreakInTargetListCount;
	f32 breakInRequestIntervalTimeSec;
	f32 breakInRequestTimeOutSec;
	dummy8 pad_1[4];
	f32 keyGuideRange;
	f32 keyGuideHeight_1;
	u32 reloadSignTotalCount_1;
	u32 reloadNewSignCellCount;
	u32 reloadRandomSignCellCount;
	u32 maxSignTotalCount_0;
	u32 maxSignCellCount_0;
	f32 basicExclusiveRange_1;
	f32 basicExclusiveHeight_1;
	f32 signVisibleRange_1;
	u32 maxWriteSignCount;
	u32 maxReadSignCount;
	f32 reloadSignIntervalTime_0;
	u32 cellGroupHorizontalRange_1;
	u32 cellGroupTopRange_1;
	u32 cellGroupBottomRange_1;
	u32 lifeTime_0;
	f32 downloadSpan_0;
	f32 downloadEvaluationSpan;
	dummy8 pad_2[4];
	f32 deadingGhostStartPosThreshold;
	f32 keyGuideHeight_2;
	f32 keyGuideRangePlayer;
	f32 keyGuideHeightPlayer;
	u32 reloadSignTotalCount_2;
	u32 reloadSignCellCount_1;
	u32 maxSignTotalCount_1;
	u32 maxSignCellCount_1;
	f32 reloadSignIntervalTime_1;
	f32 signVisibleRange_2;
	f32 basicExclusiveRange_2;
	f32 basicExclusiveHeight_2;
	u32 cellGroupHorizontalRange_2;
	u32 cellGroupTopRange_2;
	u32 cellGroupBottomRange_2;
	u32 lifeTime_1;
	f32 recordDeadingGhostTotalTime;
	f32 recordDeadingGhostMinTime;
	f32 downloadSpan_1;
	f32 statueCreatableDistance;
	u32 reloadGhostTotalCount;
	u32 reloadGhostCellCount;
	u32 maxGhostTotalCount;
	f32 distanceOfBeginRecordVersus;
	f32 distanceOfEndRecordVersus;
	f32 updateWanderGhostIntervalTime;
	f32 updateVersusGhostIntervalTime;
	f32 recordWanderingGhostTime;
	f32 recordWanderingGhostMinTime;
	f32 updateBonfireGhostIntervalTime;
	f32 replayGhostRangeOnView;
	f32 replayGhostRangeOutView;
	f32 replayBonfireGhostTime;
	f32 minBonfireGhostValidRange;
	f32 maxBonfireGhostValidRange;
	f32 minReplayIntervalTime;
	f32 maxReplayIntervalTime;
	f32 reloadGhostIntervalTime;
	u32 cellGroupHorizontalRange_3;
	u32 cellGroupTopRange_3;
	s32 replayBonfirePhantomParamIdForCodename;
	f32 replayBonfireModeRange;
	s32 replayBonfirePhantomParamId;
	dummy8 ghostpad[4];
	f32 reloadVisitListCoolTime;
	u32 maxCoopBlueSummonCount;
	u32 maxBellGuardSummonCount;
	u32 maxVisitListCount;
	f32 reloadSearch_CoopBlue_Min;
	f32 reloadSearch_CoopBlue_Max;
	f32 reloadSearch_BellGuard_Min;
	f32 reloadSearch_BellGuard_Max;
	f32 reloadSearch_RatKing_Min;
	f32 reloadSearch_RatKing_Max;
	dummy8 visitpad00[8];
	f32 srttMaxLimit;
	f32 srttMeanLimit;
	f32 srttMeanDeviationLimit;
	f32 darkPhantomLimitBoostTime;
	f32 darkPhantomLimitBoostScale;
	f32 multiplayDisableLifeTime;
	u8 abyssMultiplayLimit;
	u8 phantomWarpMinimumTime;
	u8 phantomReturnDelayTime;
	u8 terminateTimeoutTime;
	u16 penaltyPointLanDisconnect;
	u16 penaltyPointSignout;
	u16 penaltyPointReboot;
	u16 penaltyPointBeginPenalize;
	f32 penaltyForgiveItemLimitTime;
	u8 allAreaSearchRate_CoopBlue;
	u8 allAreaSearchRate_VsBlue;
	u8 allAreaSearchRate_BellGuard;
	u8 bloodMessageEvalHealRate;
	u32 smallGoldSuccessHostRewardId;
	f32 doorInvalidPlayAreaExtents;
	u8 signDisplayMax;
	u8 bloodStainDisplayMax;
	u8 bloodMessageDisplayMax;
	dummy8 pad00[9];
	dummy8 pad10[32];
	f32 summonMessageInterval;
	f32 hostRegisterUpdateTime;
	f32 hostTimeOutTime;
	f32 guestUpdateTime;
	f32 guestPlayerNoTimeOutTime;
	f32 hostPlayerNoTimeOutTime;
	u32 requestSearchQuickMatchLimit;
	u32 AvatarMatchSearchMax;
	u32 BattleRoyalMatchSearchMin;
	u32 BattleRoyalMatchSearchMax;
	dummy8 pad11[8];
	u32 VisitorListMax;
	f32 VisitorTimeOutTime;
	f32 DownloadSpan;
	f32 VisitorGuestRequestMessageIntervalSec;
	f32 wanderGhostIntervalLifeTime;
	dummy8 pad13[12];
	f32 YellowMonkTimeOutTime;
	f32 YellowMonkDownloadSpan;
	f32 YellowMonkOverallFlowTimeOutTime;
	dummy8 pad14_0[4];
	dummy8 pad14_1[8];
};
typedef struct _NETWORK_PARAM_ST NETWORK_PARAM_ST;

struct _NPC_AI_ACTION_PARAM_ST {
	u8 moveDir;
	u8 key1;
	u8 key2;
	u8 key3;
	u8 bMoveDirHold;
	u8 bKeyHold1;
	u8 bKeyHold2;
	u8 bKeyHold3;
	s32 gestureId;
	u8 bLifeEndSuccess;
	dummy8 pad1[3];
};
typedef struct _NPC_AI_ACTION_PARAM_ST NPC_AI_ACTION_PARAM_ST;

struct _NPC_PARAM_ST {
	s32 behaviorVariationId;
	s32 AiThinkId;
	s32 nameId;
	f32 turnVellocity;
	f32 hitHeight;
	f32 hitRadius;
	s32 weight;
	f32 hitOffset;
	s32 hp;
	s32 mp;
	s32 getSoul;
	s32 ItemLotId1;
	s32 ItemLotId2;
	s32 ItemLotId3;
	s32 ItemLotId4;
	s32 ItemLotId5;
	s32 ItemLotId6;
	s32 humanityLotId;
	s32 spEffectId0;
	s32 spEffectId1;
	s32 spEffectId2;
	s32 spEffectId3;
	s32 spEffectId4;
	s32 spEffectId5;
	s32 spEffectId6;
	s32 spEffectId7;
	s32 GameClearSpEffectID;
	f32 physGuardCutRate;
	f32 magGuardCutRate;
	f32 fireGuardCutRate;
	f32 thunGuardCutRate;
	s32 animidOffset;
	s16 lockGazePoint0;
	s16 lockGazePoint1;
	s16 lockGazePoint2;
	s16 lockGazePoint3;
	s16 lockGazePoint4;
	s16 lockGazePoint5;
	f32 networkWarpDisp;
	s32 dbgBehaviorR1;
	s32 dbgBehaviorL1;
	s32 dbgBehaviorR2;
	s32 dbgBehaviorL2;
	s32 dbgBehaviorRL;
	s32 dbgBehaviorRR;
	s32 dbgBehaviorRD;
	s32 dbgBehaviorRU;
	s32 dbgBehaviorLL;
	s32 dbgBehaviorLR;
	s32 dbgBehaviorLD;
	s32 dbgBehaviorLU;
	s32 animIdOffset2;
	f32 partsDamageRate1;
	f32 partsDamageRate2;
	f32 partsDamageRate3;
	f32 partsDamageRate4;
	f32 partsDamageRate5;
	f32 partsDamageRate6;
	f32 partsDamageRate7;
	f32 partsDamageRate8;
	f32 weakPartsDamageRate;
	f32 SuperArmorRecoverCorrection;
	f32 SuperArmorBrakeKnockbackDist;
	s16 stamina;
	s16 staminaRecoverBaseVal;
	s16 defPhys;
	s16 defSlash;
	s16 defBlow;
	s16 defThrust;
	s16 defMag;
	s16 defFire;
	s16 defThunder;
	s16 defFlickPower;
	s16 resistPoison;
	s16 resistToxic;
	s16 resistBlood;
	s16 resistCurse;
	s16 ghostModelId;
	s16 normalChangeResourceId;
	s16 guardAngle;
	s16 slashGuardCutRate;
	s16 blowGuardCutRate;
	s16 thrustGuardCutRate;
	s16 superArmorDurability;
	s16 normalChangeTexChrId;
	s16 dropType;
	u8 knockbackRate;
	u8 knockbackParamId;
	u8 fallDamageDamp;
	u8 staminaGuardDef;
	u8 pcAttrB;
	u8 pcAttrW;
	u8 pcAttrL;
	u8 pcAttrR;
	u8 areaAttrB;
	u8 areaAttrW;
	u8 areaAttrL;
	u8 areaAttrR;
	u8 mpRecoverBaseVal;
	u8 flickDamageCutRate;
	s8 defaultLodParamId;
	u8 drawType;
	u8 npcType;
	u8 teamType;
	u8 moveType;
	u8 lockDist;
	s16 material;
	s16 materialSfx;
	u8 partsDamageType;
	u8 maxUndurationAng;
	u8 guardLevel;
	u8 burnsfxType;
	u8 poisonGuardResist;
	u8 toxicGuardResist;
	u8 bloodGuardResist;
	u8 curseGuardResist;
	u8 parryAttack;
	u8 parryDefense;
	u8 sfxSize;
	u8 pushOutCamRegionRadius;
	u8 hitStopType;
	u8 ladderEndChkOffsetTop;
	u8 ladderEndChkOffsetLow;
	u8 UseRagdollCamHit: 1;
	u8 disableClothRigidHit: 1;
	u8 UseRagdoll: 1;
	u8 isWeakA: 1;
	u8 isGhost: 1;
	u8 isNoDamageMotion: 1;
	u8 isUnduration: 1;
	u8 isChangeWanderGhost: 1;
	u8 modelDispMask0: 1;
	u8 modelDispMask1: 1;
	u8 modelDispMask2: 1;
	u8 modelDispMask3: 1;
	u8 modelDispMask4: 1;
	u8 modelDispMask5: 1;
	u8 modelDispMask6: 1;
	u8 modelDispMask7: 1;
	u8 modelDispMask8: 1;
	u8 modelDispMask9: 1;
	u8 modelDispMask10: 1;
	u8 modelDispMask11: 1;
	u8 modelDispMask12: 1;
	u8 modelDispMask13: 1;
	u8 modelDispMask14: 1;
	u8 modelDispMask15: 1;
	u8 isEnableNeckTurn: 1;
	u8 disableRespawn: 1;
	u8 isMoveAnimWait: 1;
	u8 isCrowd: 1;
	u8 isWeakB: 1;
	u8 isWeakC: 1;
	u8 isWeakD: 1;
	u8 doesAlwaysUseSpecialTurn: 1;
	u8 VowType0: 1;
	u8 VowType1: 1;
	u8 VowType2: 1;
	u8 disableInitializeDead: 1;
	u8 isHitRumble: 1;
	u8 isSmoothTurn: 1;
	u8 isWeakE: 1;
	u8 isWeakF: 1;
	u8 modelDispMask16: 1;
	u8 modelDispMask17: 1;
	u8 modelDispMask18: 1;
	u8 modelDispMask19: 1;
	u8 modelDispMask20: 1;
	u8 modelDispMask21: 1;
	u8 modelDispMask22: 1;
	u8 modelDispMask23: 1;
	u8 modelDispMask24: 1;
	u8 modelDispMask25: 1;
	u8 modelDispMask26: 1;
	u8 modelDispMask27: 1;
	u8 modelDispMask28: 1;
	u8 modelDispMask29: 1;
	u8 modelDispMask30: 1;
	u8 modelDispMask31: 1;
	f32 itemSearchRadius;
	f32 chrHitHeight;
	f32 chrHitRadius;
	u8 specialTurnType;
	u8 isSoulGetByBoss: 1;
	u8 isBulletOwner_byObject: 1;
	u8 isUseLowHitFootIk: 1;
	u8 isCalculatePvPDamage: 1;
	u8 isHostSyncChr: 1;
	u8 isSkipWeakDamageAnim: 1;
	u8 Unk6: 1;
	u8 Unk7: 1;
	s16 defDark;
	f32 specialTurnDistanceThreshold;
	s32 autoFootEffectSfxId;
	s16 subMaterial;
	s16 subMaterialSfx;
	s16 material_Weak;
	s16 materialSfx_Weak;
	s16 subMaterial_weak;
	s16 subMaterialSfx_weak;
	s32 spEffectId8;
	s32 spEffectId9;
	s32 spEffectId10;
	s32 spEffectId11;
	s32 spEffectId12;
	s32 spEffectId13;
	s32 spEffectId14;
	s32 spEffectId15;
	s32 autoFootEffectDecalBaseId1;
	s32 toughness;
	f32 toughnessRecoverCorrection;
	f32 regainRate_PhysNeutral;
	f32 regainRate_PhysSlash;
	f32 regainRate_PhysBlow;
	f32 regainRate_PhysThrust;
	f32 regainRate_Magic;
	f32 regainRate_Fire;
	f32 regainRate_Thunder;
	f32 regainRate_Dark;
	f32 darkGuardCutRate;
	s8 clothUpdateOffset;
	u8 npcPlayerWeightType;
	s16 normalChangeModelId;
	s16 normalChangeAnimChrId;
	s16 paintRenderTargetSize;
	s32 CultSettingId;
	s32 PhantomParamId;
	s32 MultiPlayCorrectionId;
	f32 maxAnklePitchAngle;
	s16 resistFrost;
	u8 freezeGuardResist;
	u8 subTeamType;
	s32 lockCamParamId;
	s32 spEffectId16;
	s32 spEffectId17;
	s32 spEffectId18;
	s32 spEffectId19;
	s32 spEffectId20;
	s32 spEffectId21;
	s32 spEffectId22;
	s32 spEffectId23;
	s32 spEffectId24;
	s32 spEffectId25;
	s32 spEffectId26;
	s32 spEffectId27;
	s32 spEffectId28;
	s32 spEffectId29;
	s32 spEffectId30;
	s32 spEffectId31;
	f32 disableLockOnAng;
	s8 clothOffLodLevel;
	dummy8 pad1[1];
	s16 estusFlaskRecoveryParamId;
	s32 roleNameId;
	s16 estusFlaskLotPoint;
	s16 hpEstusFlaskLotPoint;
	s16 mpEstusFlaskLotPoint;
	s16 estusFlaskRecovery_failedLotPointAdd;
	s16 hpEstusFlaskRecovery_failedLotPointAdd;
	s16 mpEstusFlaskRecovery_failedLotPointAdd;
	s32 WanderGhostPhantomId;
	f32 hearingHeadSize;
	dummy8 pad2[4];
};
typedef struct _NPC_PARAM_ST NPC_PARAM_ST;

struct _NPC_THINK_PARAM_ST {
	s32 logicId;
	s32 battleGoalID;
	dummy8 pad1[16];
	f32 BackHomeLife_OnHitEneWal;
	f32 SightTargetForgetTime;
	s32 idAttackCannotMove;
	f32 ear_dist;
	s32 callHelp_ActionAnimId;
	s32 callHelp_CallActionId;
	u16 eye_dist;
	u8 isGuard_Act;
	dummy8 pad6[1];
	u16 ear_soundcut_dist;
	u16 nose_dist;
	u16 maxBackhomeDist;
	u16 backhomeDist;
	u16 backhomeBattleDist;
	u16 nonBattleActLife;
	u16 BackHome_LookTargetTime;
	u16 BackHome_LookTargetDist;
	f32 SoundTargetForgetTime;
	u16 BattleStartDist;
	u16 callHelp_MyPeerId;
	u16 callHelp_CallPeerId;
	u16 targetSys_DmgEffectRate;
	u8 TeamAttackEffectivity;
	u8 eye_angX;
	u8 eye_angY;
	u8 disableDark;
	u8 caravanRole;
	u8 callHelp_CallValidMinDistTarget;
	u8 callHelp_CallValidRange;
	u8 callHelp_ForgetTimeByArrival;
	u8 callHelp_MinWaitTime;
	u8 callHelp_MaxWaitTime;
	u8 goalAction_ToCaution;
	u8 ear_listenLevel;
	u8 callHelp_ReplyBehaviorType;
	u8 disablePathMove;
	u8 skipArrivalVisibleCheck;
	u8 thinkAttr_doAdmirer;
	u8 enableNaviFlg_Edge: 1;
	u8 enableNaviFlg_LargeSpace: 1;
	u8 enableNaviFlg_Ladder: 1;
	u8 enableNaviFlg_Hole: 1;
	u8 enableNaviFlg_Door: 1;
	u8 enableNaviFlg_InSideWall: 1;
	u8 enableNaviFlg_EdgeOrdinary: 1;
	u8 enableNaviFlg_reserve0: 1;
	dummy8 enableNaviFlagReserve[3];
	s32 searchThreshold_Lv0toLv1;
	s32 searchThreshold_Lv1toLv2;
	f32 platoonReplyTime;
	f32 platoonReplyAddRandomTime;
	u8 searchEye_angX;
	u8 isUpdateBattleSight;
	u16 battleEye_updateDist;
	u8 battleEye_updateAngX;
	u8 battleEye_updateAngY;
	dummy8 pad2[16];
	u16 eye_BackOffsetDist;
	u16 eye_BeginDist;
	u8 actTypeOnFailedPath;
	u8 goalAction_ToCautionImportant;
	s32 shiftAnimeId_RangedAttack;
	u8 actTypeOnNonBtlFailedPath;
	u8 isBuddyAI;
	u8 goalAction_ToSearchLv1;
	u8 goalAction_ToSearchLv2;
	u8 enableJumpMove;
	u8 disableLocalSteering;
	u8 goalAction_ToDisappear;
	u8 changeStateAction_ToNormal;
	f32 MemoryTargetForgetTime;
	s32 rangedAttackId;
	u8 useFall_onNormalCaution;
	u8 useFall_onSearchBattle;
	u8 enableJumpMove_onBattle;
	u8 backToHomeStuckAct;
	dummy8 pad3[4];
};
typedef struct _NPC_THINK_PARAM_ST NPC_THINK_PARAM_ST;

struct _OBJECT_MATERIAL_SFX_PARAM_ST {
	u32 sfxId_00;
	u32 sfxId_01;
	u32 sfxId_02;
	u32 sfxId_03;
	u32 sfxId_04;
	u32 sfxId_05;
	u32 sfxId_06;
	u32 sfxId_07;
	u32 sfxId_08;
	u32 sfxId_09;
	u32 sfxId_10;
	u32 sfxId_11;
	u32 sfxId_12;
	u32 sfxId_13;
	u32 sfxId_14;
	u32 sfxId_15;
	u32 sfxId_16;
	u32 sfxId_17;
	u32 sfxId_18;
	u32 sfxId_19;
	u32 sfxId_20;
	u32 sfxId_21;
	u32 sfxId_22;
	u32 sfxId_23;
	u32 sfxId_24;
	u32 sfxId_25;
	u32 sfxId_26;
	u32 sfxId_27;
	u32 sfxId_28;
	u32 sfxId_29;
	u32 sfxId_30;
	u32 sfxId_31;
};
typedef struct _OBJECT_MATERIAL_SFX_PARAM_ST OBJECT_MATERIAL_SFX_PARAM_ST;

struct _OBJECT_PARAM_ST {
	s16 hp;
	u16 defense;
	s16 extRefTexId;
	s16 materialId;
	u8 animBreakIdMax;
	u8 isCamHit: 1;
	u8 isBreakByPlayerCollide: 1;
	u8 isAnimBreak: 1;
	u8 isPenetrationBulletHit: 1;
	u8 isChrHit: 1;
	u8 isAttackBacklash: 1;
	u8 isDisableBreakForFirstAppear: 1;
	u8 isLadder: 1;
	u8 isAnimPauseOnRemoPlay: 1;
	u8 isDamageNoHit: 1;
	u8 isMoveObj: 1;
	u8 isRopeBridge: 1;
	u8 isAddRigidImpulse_ByDamage: 1;
	u8 isBreak_ByChrRide: 1;
	u8 isBurn: 1;
	u8 isBreakByEnemyCollide: 1;
	s8 defaultLodParamId;
	s32 breakSfxId;
	s32 breakSfxCpId;
	s32 breakBulletBehaviorId;
	s32 breakBulletCpId;
	u8 breakFallHeight;
	u8 windEffectType_0;
	u8 windEffectType_1;
	u8 camAvoidType;
	f32 windEffectRate_0;
	f32 windEffectRate_1;
	f32 breakStopTime;
	f32 burnTime;
	f32 burnBraekRate;
	s32 burnSfxId;
	s32 burnSfxId_1;
	s32 burnSfxId_2;
	s32 burnSfxId_3;
	s32 burnBulletBehaviorId;
	s32 burnBulletBehaviorId_1;
	s32 burnBulletBehaviorId_2;
	s32 burnBulletBehaviorId_3;
	u16 burnBulletInterval;
	u8 navimeshFlag;
	u8 collisionType;
	f32 burnBulletDelayTime;
	f32 burnSfxDelayTimeMin;
	f32 burnSfxDelayTimeMin_1;
	f32 burnSfxDelayTimeMin_2;
	f32 burnSfxDelayTimeMin_3;
	f32 burnSfxDelayTimeMax;
	f32 burnSfxDelayTimeMax_1;
	f32 burnSfxDelayTimeMax_2;
	f32 burnSfxDelayTimeMax_3;
	s32 BreakAiSoundID;
	f32 FragmentInvisibleWaitTime;
	f32 FragmentInvisibleTime;
	dummy8 pad_3[16];
	f32 RigidPenetrationScale_Soft;
	f32 RigidPenetrationScale_Normal;
	f32 RigidPenetrationScale_Hard;
	s32 LandTouchSfxId;
	u8 isDamageCover: 1;
	dummy8 pad_4[1];
	s16 paintDecalTargetTextureSize;
	f32 lifeTime_forDC;
	f32 clothUpdateDist;
	s32 contactSeId;
	s32 breakLandingSfxId;
	dummy8 pad1[68];
};
typedef struct _OBJECT_PARAM_ST OBJECT_PARAM_ST;

struct _OBJ_ACT_PARAM_ST {
	s32 actionEnableMsgId;
	s32 actionFailedMsgId;
	s32 spQualifiedPassEventFlag;
	s32 playerAnimId;
	s32 chrAnimId;
	s16 validDist;
	s16 spQualifiedId;
	s16 spQualifiedId2;
	u8 objDummyId;
	u8 isEventKickSync;
	u32 objAnimId;
	u8 validPlayerAngle;
	u8 spQualifiedType;
	u8 spQualifiedType2;
	u8 validObjAngle;
	u8 chrSorbType;
	u8 eventKickTiming;
	dummy8 pad2[2];
	s32 actionButtonParamId;
	f32 enableTreasureDelaySec;
};
typedef struct _OBJ_ACT_PARAM_ST OBJ_ACT_PARAM_ST;

struct _PHANTOM_PARAM_ST {
	f32 edgeColorA;
	f32 frontColorA;
	f32 diffMulColorA;
	f32 specMulColorA;
	f32 lightColorA;
	u8 edgeColorR;
	u8 edgeColorG;
	u8 edgeColorB;
	u8 frontColorR;
	u8 frontColorG;
	u8 frontColorB;
	u8 diffMulColorR;
	u8 diffMulColorG;
	u8 diffMulColorB;
	u8 specMulColorR;
	u8 specMulColorG;
	u8 specMulColorB;
	u8 lightColorR;
	u8 lightColorG;
	u8 lightColorB;
	dummy8 pad1[1];
	f32 alpha;
	f32 blendRate;
	u8 blendType;
	u8 isEdgeSubtract;
	u8 isFrontSubtract;
	u8 isNo2Pass;
};
typedef struct _PHANTOM_PARAM_ST PHANTOM_PARAM_ST;

struct _PLAY_REGION_PARAM_ST {
	s32 matchAreaId;
	s32 multiPlayStartLimitEventFlagId;
	f32 otherDisableDistance;
	s32 pcPositionSaveLimitEventFlagId;
	s32 bossAreaId;
	s16 cultNpcWhiteGhostEntityId_byFree;
	u8 bMapGuradianRegion;
	u8 bYellowCostumeRegion: 1;
	u8 multiPlayStartLimitEventFlagId_targetFlagState: 1;
	u8 breakInLimitEventFlagId_1_targetFlagState: 1;
	u8 whiteSignLimitEventFlagId_1_targetFlagState: 1;
	u8 redSignLimitEventFlagId_1_targetFlagState: 1;
	u8 breakInLimitEventFlagId_2_targetFlagState: 1;
	u8 breakInLimitEventFlagId_3_targetFlagState: 1;
	u8 whiteSignLimitEventFlagId_2_targetFlagState: 1;
	s32 warpItemUsePermitBonfireId_1;
	s32 warpItemUsePermitBonfireId_2;
	s32 warpItemUsePermitBonfireId_3;
	s32 warpItemUsePermitBonfireId_4;
	s32 warpItemUsePermitBonfireId_5;
	s32 warpItemProhibitionEventFlagId_1;
	s32 warpItemProhibitionEventFlagId_2;
	s32 warpItemProhibitionEventFlagId_3;
	s32 warpItemProhibitionEventFlagId_4;
	s32 warpItemProhibitionEventFlagId_5;
	u8 enableBloodstain: 1;
	u8 enableBloodMessage: 1;
	u8 enableGhost: 1;
	u8 dispMask00: 1;
	u8 dispMask01: 1;
	u8 whiteSignLimitEventFlagId_3_targetFlagState: 1;
	u8 redSignLimitEventFlagId_2_targetFlagState: 1;
	u8 redSignLimitEventFlagId_3_targetFlagState: 1;
	u8 isAutoIntrudePoint: 1;
	dummy8 pad1: 7;
	dummy8 pad2[2];
	s32 multiPlayHASHostLimitEventFlagId;
	f32 otherMaxDistance;
	s32 signPuddleOpenEventFlagId;
	dummy8 pad3[16];
};
typedef struct _PLAY_REGION_PARAM_ST PLAY_REGION_PARAM_ST;

struct _PROTECTOR_GEN_PARAM_ST {
	s32 proParamId;
	u32 gemSlotType_0;
	s32 gemGenId_0;
	u32 gemSlotType_1;
	s32 gemGenId_1;
	u32 gemSlotType_2;
	s32 gemGenId_2;
	u32 gemSlotType_3;
	s32 gemGenId_3;
	u32 gemSlotType_4;
	s32 gemGenId_4;
};
typedef struct _PROTECTOR_GEN_PARAM_ST PROTECTOR_GEN_PARAM_ST;

struct _RAGDOLL_PARAM_ST {
	f32 hierarchGain;
	f32 velocityDamping;
	f32 accelGain;
	f32 velocityGain;
	f32 positionGain;
	f32 maxLinerVelocity;
	f32 maxAngularVelocity;
	f32 snapGain;
	u8 enable;
	s8 partsHitMaskNo;
	dummy8 pad1[14];
};
typedef struct _RAGDOLL_PARAM_ST RAGDOLL_PARAM_ST;

struct _REINFORCE_PARAM_PROTECTOR_ST {
	f32 physicDefRate;
	f32 magicDefRate;
	f32 fireDefRate;
	f32 thunderDefRate;
	f32 slashDefRate;
	f32 blowDefRate;
	f32 thrustDefRate;
	f32 resistPoisonRate;
	f32 resistToxicRate;
	f32 resistBloodRate;
	f32 resistCurseRate;
	u8 ResidentSpEffectId1;
	u8 ResidentSpEffectId2;
	u8 ResidentSpEffectId3;
	u8 materialSetId;
	f32 darkDefRate;
	f32 resistFrost;
	dummy8 pad1[8];
};
typedef struct _REINFORCE_PARAM_PROTECTOR_ST REINFORCE_PARAM_PROTECTOR_ST;

struct _REINFORCE_PARAM_WEAPON_ST {
	f32 physicsAtkRate;
	f32 magicAtkRate;
	f32 fireAtkRate;
	f32 thunderAtkRate;
	f32 staminaAtkRate;
	f32 saWeaponAtkRate;
	f32 saDurabilityRate;
	f32 correctStrengthRate;
	f32 correctAgilityRate;
	f32 correctMagicRate;
	f32 correctFaithRate;
	f32 physicsGuardCutRate;
	f32 magicGuardCutRate;
	f32 fireGuardCutRate;
	f32 thunderGuardCutRate;
	f32 poisonGuardResistRate;
	f32 toxicGuardResistRate;
	f32 bleedGuardResistRate;
	f32 curseGuardResistRate;
	f32 staminaGuardResistRate;
	u8 spEffectId1;
	u8 spEffectId2;
	u8 spEffectId3;
	u8 residentSpEffectId1;
	u8 residentSpEffectId2;
	u8 residentSpEffectId3;
	u8 materialSetId;
	u8 maxReinforceLevel;
	f32 darkAtkRate;
	f32 darkGuardCutRate;
	f32 correctLuckRate;
	f32 freezeGuardDefRate;
	f32 reinforcePriceRate;
	f32 baseChangePriceRate;
	dummy8 pad2[16];
};
typedef struct _REINFORCE_PARAM_WEAPON_ST REINFORCE_PARAM_WEAPON_ST;

struct _ROLE_PARAM_ST {
	u8 TeamType;
	dummy8 pad1[3];
	s32 PhantomParamId0;
	s32 SpEffectId0;
	s32 SpEffectId1;
	s32 SpEffectId2;
	s32 SpEffectId3;
	s32 SpEffectId4;
	s32 SpEffectId5;
	s32 SpEffectId6;
	s32 SpEffectId7;
	s32 SpEffectId8;
	s32 SpEffectId9;
	s32 sosSignSfxId;
	s32 mySosSignSfxId;
	s32 summonStartAnimId;
	s32 itemlotParamId;
	u8 voiceChatGroup;
	u8 roleNameColor;
	dummy8 pad2[2];
	s32 roleNameId;
	s32 subTeamType;
	s32 PhantomParamId1;
	s32 PhantomParamId2;
	s32 PhantomParamId3;
	s32 spEffect10;
	s32 spEffect11;
	s32 spEffect12;
	s32 spEffect13;
	s32 signPhantomId;
	s32 nonPlayerSummonStartAnimId;
	dummy8 pad3[16];
};
typedef struct _ROLE_PARAM_ST ROLE_PARAM_ST;

struct _SE_MATERIAL_CONVERT_PARAM_ST {
	u8 seMaterialId;
	dummy8 pad[3];
};
typedef struct _SE_MATERIAL_CONVERT_PARAM_ST SE_MATERIAL_CONVERT_PARAM_ST;

struct _SHOP_LINEUP_PARAM {
	s32 equipId;
	s32 value;
	s32 mtrlId;
	s32 eventFlag_forStock;
	s32 eventFlag_forRelease;
	s16 sellQuantity;
	dummy8 pad1[1];
	u8 equipType;
	dummy8 pad2[2];
	u16 setNum;
	s32 value_Add;
	f32 value_Magnification;
};
typedef struct _SHOP_LINEUP_PARAM SHOP_LINEUP_PARAM;

struct _SKELETON_PARAM_ST {
	f32 neckTurnGain;
	s16 originalGroundHeightMS;
	s16 minAnkleHeightMS;
	s16 maxAnkleHeightMS;
	s16 cosineMaxKneeAngle;
	s16 cosineMinKneeAngle;
	s16 footPlantedAnkleHeightMS;
	s16 footRaisedAnkleHeightMS;
	s16 raycastDistanceUp;
	s16 raycastDistanceDown;
	s16 footEndLS_X;
	s16 footEndLS_Y;
	s16 footEndLS_Z;
	s16 onOffGain;
	s16 groundAcsendingGain;
	s16 groundDescendingGain;
	s16 footRaisedGain;
	s16 footPlantedGain;
	s16 footUnlockGain;
	u8 kneeAxisType;
	u8 useFootLocking;
	u8 footPlacementOn;
	u8 twistKneeAxisType;
	u8 neckTurnPriority;
	u8 neckTurnMaxAngle;
	dummy8 pad1[2];
};
typedef struct _SKELETON_PARAM_ST SKELETON_PARAM_ST;

struct _SP_EFFECT_PARAM_ST {
	s32 iconId;
	f32 conditionHp;
	f32 effectEndurance;
	f32 motionInterval;
	f32 maxHpRate;
	f32 maxMpRate;
	f32 maxStaminaRate;
	f32 slashDamageCutRate;
	f32 blowDamageCutRate;
	f32 thrustDamageCutRate;
	f32 neutralDamageCutRate;
	f32 magicDamageCutRate;
	f32 fireDamageCutRate;
	f32 thunderDamageCutRate;
	f32 physicsAttackRate;
	f32 magicAttackRate;
	f32 fireAttackRate;
	f32 thunderAttackRate;
	f32 physicsAttackPowerRate;
	f32 magicAttackPowerRate;
	f32 fireAttackPowerRate;
	f32 thunderAttackPowerRate;
	s32 physicsAttackPower;
	s32 magicAttackPower;
	s32 fireAttackPower;
	s32 thunderAttackPower;
	f32 physicsDiffenceRate;
	f32 magicDiffenceRate;
	f32 fireDiffenceRate;
	f32 thunderDiffenceRate;
	s32 physicsDiffence;
	s32 magicDiffence;
	s32 fireDiffence;
	s32 thunderDiffence;
	f32 NoGuardDamageRate;
	f32 vitalSpotChangeRate;
	f32 normalSpotChangeRate;
	f32 lookAtTargetPosOffset;
	s32 behaviorId;
	f32 changeHpRate;
	s32 changeHpPoint;
	f32 changeMpRate;
	s32 changeMpPoint;
	s32 mpRecoverChangeSpeed;
	f32 changeStaminaRate;
	s32 changeStaminaPoint;
	s32 staminaRecoverChangeSpeed;
	f32 magicEffectTimeChange;
	s32 insideDurability;
	s32 maxDurability;
	f32 staminaAttackRate;
	s32 poizonAttackPower;
	s32 diseaseAttackPower;
	s32 bloodAttackPower;
	s32 curseAttackPower;
	f32 fallDamageRate;
	f32 soulRate;
	f32 equipWeightChangeRate;
	f32 allItemWeightChangeRate;
	s32 soul;
	s32 animIdOffset;
	f32 haveSoulRate;
	f32 targetPriority;
	s32 sightSearchEnemyRate;
	f32 hearingSearchEnemyRate;
	f32 grabityRate;
	f32 registPoizonChangeRate;
	f32 registDiseaseChangeRate;
	f32 registBloodChangeRate;
	f32 registCurseChangeRate;
	f32 soulStealRate;
	f32 lifeReductionRate;
	f32 hpRecoverRate;
	s32 replaceSpEffectId;
	s32 cycleOccurrenceSpEffectId;
	s32 atkOccurrenceSpEffectId;
	f32 guardDefFlickPowerRate;
	f32 guardStaminaCutRate;
	s16 rayCastPassedTime;
	s16 changeSuperArmorPoint;
	s16 bowDistRate;
	s16 spCategory;
	s8 categoryPriority;
	s8 saveCategory;
	u8 changeMagicSlot;
	u8 changeMiracleSlot;
	u8 heroPointDamage;
	u8 defFlickPower;
	u8 flickDamageCutRate;
	u8 bloodDamageRate;
	u8 dmgLv_None;
	u8 dmgLv_S;
	u8 dmgLv_M;
	u8 dmgLv_L;
	u8 dmgLv_BlowM;
	u8 dmgLv_Push;
	u8 dmgLv_Strike;
	u8 dmgLv_BlowS;
	u8 dmgLv_Min;
	u8 dmgLv_Uppercut;
	u8 dmgLv_BlowLL;
	u8 dmgLv_Breath;
	u8 atkAttribute;
	u8 spAttribute;
	s16 stateInfo;
	u8 wepParamChange;
	u8 moveType;
	s16 lifeReductionType;
	u8 throwCondition;
	s8 addBehaviorJudgeId_condition;
	u8 freezeDamageRate;
	u8 effectTargetSelf: 1;
	u8 effectTargetFriend: 1;
	u8 effectTargetEnemy: 1;
	u8 effectTargetPlayer: 1;
	u8 effectTargetAI: 1;
	u8 effectTargetLive: 1;
	u8 effectTargetGhost: 1;
	u8 effectTargetWhiteGhost: 1;
	u8 effectTargetBlackGhost: 1;
	u8 effectTargetAttacker: 1;
	u8 dispIconNonactive: 1;
	u8 useSpEffectEffect: 1;
	u8 bAdjustMagicAbility: 1;
	u8 bAdjustFaithAbility: 1;
	u8 bGameClearBonus: 1;
	u8 magParamChange: 1;
	u8 miracleParamChange: 1;
	u8 clearSoul: 1;
	u8 requestSOS: 1;
	u8 requestBlackSOS: 1;
	u8 requestForceJoinBlackSOS: 1;
	u8 requestKickSession: 1;
	u8 requestLeaveSession: 1;
	u8 requestNpcInveda: 1;
	u8 noDead: 1;
	u8 bCurrHPIndependeMaxHP: 1;
	u8 corrosionIgnore: 1;
	u8 sightSearchCutIgnore: 1;
	u8 hearingSearchCutIgnore: 1;
	u8 antiMagicIgnore: 1;
	u8 fakeTargetIgnore: 1;
	u8 fakeTargetIgnoreUndead: 1;
	u8 fakeTargetIgnoreAnimal: 1;
	u8 grabityIgnore: 1;
	u8 disablePoison: 1;
	u8 disableDisease: 1;
	u8 disableBlood: 1;
	u8 disableCurse: 1;
	u8 enableCharm: 1;
	u8 enableLifeTime: 1;
	u8 hasTarget: 1;
	u8 replanningOnFire: 1;
	u8 eraseOnBonfireRecover: 1;
	u8 requestLeaveColiseumSession: 1;
	u8 bAdjustStrengthAblity: 1;
	u8 bAdjustAgilityAblity: 1;
	u8 chargeAttackParamChange: 1;
	u8 throwAttackParamChange: 1;
	u8 vowType0: 1;
	u8 vowType1: 1;
	u8 vowType2: 1;
	u8 vowType3: 1;
	u8 vowType4: 1;
	u8 vowType5: 1;
	u8 vowType6: 1;
	u8 vowType7: 1;
	u8 vowType8: 1;
	u8 vowType9: 1;
	u8 vowType10: 1;
	u8 vowType11: 1;
	u8 vowType12: 1;
	u8 vowType13: 1;
	u8 vowType14: 1;
	u8 vowType15: 1;
	u8 repAtkDmgLv;
	f32 sightSearchRate;
	u8 effectTargetOpposeTarget: 1;
	u8 effectTargetFriendlyTarget: 1;
	u8 effectTargetSelfTarget: 1;
	u8 effectTargetPcHorse: 1;
	u8 effectTargetPcDeceased: 1;
	u8 isContractSpEffectLife: 1;
	u8 isWaitModeDelete: 1;
	u8 isIgnoreNoDamage: 1;
	s8 changeTeamType;
	s16 dmypolyId;
	s32 vfxId;
	s32 accumuOverFireId;
	s32 accumuOverVal;
	s32 accumuUnderFireId;
	s32 accumuUnderVal;
	s32 accumuVal;
	u8 eye_angX;
	u8 eye_angY;
	s16 addDeceasedLv;
	s32 unknown;
	s32 vfxId1;
	s32 vfxId2;
	s32 vfxId3;
	s32 vfxId4;
	s32 vfxId5;
	s32 vfxId6;
	s32 vfxId7;
	s32 freezeAttackPower;
	s32 AppearAiSoundId;
	s16 addFootEffectSfxId;
	s8 unknown2;
	s8 teamOffenseEffectivity;
	f32 toughnessDamageCutRate;
	f32 weakDmgRateA;
	f32 weakDmgRateB;
	f32 weakDmgRateC;
	f32 weakDmgRateD;
	f32 weakDmgRateE;
	f32 weakDmgRateF;
	f32 darkDamageCutRate;
	f32 darkDiffenceRate;
	s32 darkDiffence;
	f32 darkAttackRate;
	f32 darkAttackPowerRate;
	s32 darkAttackPower;
	f32 antiDarkSightRadius;
	s32 antiDarkSightDmypolyId;
	f32 conditionHpRate;
	f32 consumeStaminaRate;
	f32 itemDropRate;
	f32 unknown3;
	s32 changePoisonResistPoint;
	s32 changeDiseaseResistPoint;
	s32 changeBloodResistPoint;
	s32 changeCurseResistPoint;
	s32 changeFreezeResistPoint;
	f32 slashAttackRate;
	f32 blowAttackRate;
	f32 thrustAttackRate;
	f32 neutralAttackRate;
	f32 slashAttackPowerRate;
	f32 blowAttackPowerRate;
	f32 thrustAttackPowerRate;
	f32 neutralAttackPowerRate;
	s32 slashAttackPower;
	s32 blowAttackPower;
	s32 thrustAttackPower;
	s32 neutralAttackPower;
	s32 changeStrengthPoint;
	s32 changeAgilityPoint;
	s32 changeMagicPoint;
	s32 changeFaithPoint;
	s32 changeLuckPoint;
	s8 recoverArtsPoint_Str;
	s8 recoverArtsPoint_Dex;
	s8 recoverArtsPoint_Magic;
	s8 recoverArtsPoint_Miracle;
	u8 wetConditionDepth;
	u8 disableFreeze: 1;
	u8 isUseStatusAilmentAtkPowerCorrect: 1;
	u8 isUseAtkParamAtkPowerCorrect: 1;
	u8 isHollowingCorrection: 1;
	u8 affectedByDurationContraction: 1;
	u8 waitForTriggerStateInfo: 1;
	u8 ignoreNoDamage: 1;
	u8 isDisableNetSync: 1;
	u8 eyeAngleUpper_around;
	u8 eyeAngleUpper_bottom;
	f32 saReceiveDamageRate;
	f32 defPlayerDmgCorrectRate_Physics;
	f32 defPlayerDmgCorrectRate_Magic;
	f32 defPlayerDmgCorrectRate_Fire;
	f32 defPlayerDmgCorrectRate_Thunder;
	f32 defPlayerDmgCorrectRate_Dark;
	f32 defEnemyDmgCorrectRate_Physics;
	f32 defEnemyDmgCorrectRate_Magic;
	f32 defEnemyDmgCorrectRate_Fire;
	f32 defEnemyDmgCorrectRate_Thunder;
	f32 defEnemyDmgCorrectRate_Dark;
	f32 defObjDmgCorrectRate;
	f32 atkPlayerDmgCorrectRate_Physics;
	f32 atkPlayerDmgCorrectRate_Magic;
	f32 atkPlayerDmgCorrectRate_Fire;
	f32 atkPlayerDmgCorrectRate_Thunder;
	f32 atkPlayerDmgCorrectRate_Dark;
	f32 atkEnemyDmgCorrectRate_Physics;
	f32 atkEnemyDmgCorrectRate_Magic;
	f32 atkEnemyDmgCorrectRate_Fire;
	f32 atkEnemyDmgCorrectRate_Thunder;
	f32 atkEnemyDmgCorrectRate_Dark;
	f32 registFreezeChangeRate;
	s16 invocationConditionsStateChange1;
	s16 invocationConditionsStateChange2;
	s16 invocationConditionsStateChange3;
	u8 affectPyromancy;
	u8 fakeDexterity_castSpeed;
	f32 value_Magnification;
	f32 artsConsumptionRate;
	f32 magicConsumptionRate;
	f32 shamanConsumptionRate;
	f32 miracleConsumptionRate;
	s32 changeHpEstusFlaskRate;
	s32 changeHpEstusFlaskPoint;
	s32 changeMpEstusFlaskRate;
	s32 changeMpEstusFlaskPoint;
	f32 changeHpEstusFlaskCorrectRate;
	f32 changeMpEstusFlaskCorrectRate;
	s32 applyIdOnGetSoul;
	f32 extendLifeRate;
	f32 contractLifeRate;
	u8 behaviorJudgeId_add0;
	u8 behaviorJudgeId_add1;
	s16 effectEndDeleteDecalGroupId;
	f32 defObjectAttackPowerRate;
	s8 addLifeForceStatus;
	s8 addWillpowerStatus;
	s8 addEndureStatus;
	s8 addVitalityStatus;
	s8 addStrengthStatus;
	s8 addDexterityStatus;
	s8 addMagicStatus;
	s8 addFaithStatus;
	s8 addLuckStatus;
	s8 deleteCriteriaDamage;
	dummy8 pad10[14];
};
typedef struct _SP_EFFECT_PARAM_ST SP_EFFECT_PARAM_ST;

struct _SP_EFFECT_VFX_PARAM_ST {
	s32 midstSfxId;
	s32 midstSeId;
	s32 initSfxId;
	s32 initSeId;
	s32 finishSfxId;
	s32 finishSeId;
	f32 camouflageBeginDist;
	f32 camouflageEndDist;
	s32 transformProtectorId;
	s16 midstDmyId;
	s16 initDmyId;
	s16 finishDmyId;
	u8 effectType;
	u8 soulParamIdForWepEnchant;
	u8 playCategory;
	u8 playPriority;
	u8 existEffectForLarge: 1;
	u8 existEffectForSoul: 1;
	u8 effectInvisibleAtCamouflage: 1;
	u8 useCamouflage: 1;
	u8 invisibleAtFriendCamouflage: 1;
	u8 isHideFootEffect_forCamouflage: 1;
	u8 halfCamouflage: 1;
	u8 isFullBodyTransformProtectorId: 1;
	u8 isInvisibleWeapon: 1;
	u8 isSilence: 1;
	u8 isMidstFullbody: 1;
	u8 isInitFullbody: 1;
	u8 isFinishFullbody: 1;
	u8 isVisibleDeadChr: 1;
	u8 isUseOffsetEnchantSfxSize: 1;
	dummy8 pad_1: 1;
	s32 decalId1;
	s32 decalId2;
	u8 footEffectPriority;
	u8 footEffectOffset;
	u8 traceSfxIdOffsetType;
	u8 forceDeceasedType;
	s32 enchantStartDmyId_0;
	s32 enchantEndDmyId_0;
	s32 enchantStartDmyId_1;
	s32 enchantEndDmyId_1;
	s32 enchantStartDmyId_2;
	s32 enchantEndDmyId_2;
	s32 enchantStartDmyId_3;
	s32 enchantEndDmyId_3;
	s32 enchantStartDmyId_4;
	s32 enchantEndDmyId_4;
	s32 enchantStartDmyId_5;
	s32 enchantEndDmyId_5;
	s32 enchantStartDmyId_6;
	s32 enchantEndDmyId_6;
	s32 enchantStartDmyId_7;
	s32 enchantEndDmyId_7;
	u8 SfxIdOffsetType;
	u8 phantomParamOverwriteType;
	u8 camouflageMinAlpha;
	u8 wetAspectType;
	s32 phantomParamOverwriteId;
	f32 emissiveIntensityScale;
	f32 unknown2;
	s16 footDecalMaterialOffsetOverwriteId;
	s16 unknown3;
	f32 emberEffectGlow;
	dummy8 pad1[8];
};
typedef struct _SP_EFFECT_VFX_PARAM_ST SP_EFFECT_VFX_PARAM_ST;

struct _SWORD_ARTS_PARAM_ST {
	u8 swordArtsType;
	u8 artsSpeedType;
	u8 refStatus;
	u8 isRefRightArts: 1;
	u8 isGrayoutLeftHand: 1;
	u8 isGrayoutRightHand: 1;
	u8 isGrayoutBothHand: 1;
	dummy8 reserve2: 4;
	s8 usePoint_L1;
	s8 usePoint_L2;
	s8 usePoint_R1;
	s8 usePoint_R2;
	s32 textId;
	s16 useMagicPoint_L1;
	s16 useMagicPoint_L2;
	s16 useMagicPoint_R1;
	s16 useMagicPoint_R2;
	s8 shieldIconType;
	dummy8 pad1[11];
};
typedef struct _SWORD_ARTS_PARAM_ST SWORD_ARTS_PARAM_ST;

struct _TALK_PARAM_ST {
	s32 msgId;
	s32 voiceId;
	s32 spEffectId0;
	s32 motionId0;
	s32 spEffectId1;
	s32 motionId1;
	s32 returnPos;
	s32 reactionId;
	s32 eventId;
	s32 msgId_female;
	s32 voiceId_female;
	f32 talkDuration;
};
typedef struct _TALK_PARAM_ST TALK_PARAM_ST;

struct _THROW_DIRECTION_SFX_PARAM_ST {
	s32 sfxId_00;
	s32 sfxId_01;
	s32 sfxId_02;
	s32 sfxId_03;
	s32 sfxId_04;
	s32 sfxId_05;
	s32 sfxId_06;
	s32 sfxId_07;
	s32 sfxId_08;
	s32 sfxId_09;
	s32 sfxId_10;
	s32 sfxId_11;
	s32 sfxId_12;
	s32 sfxId_13;
	s32 sfxId_14;
	s32 sfxId_15;
	s32 sfxId_16;
	s32 sfxId_17;
	s32 sfxId_18;
	s32 sfxId_19;
	s32 sfxId_20;
	s32 sfxId_21;
	s32 sfxId_22;
	s32 sfxId_23;
	s32 sfxId_24;
	s32 sfxId_25;
	s32 sfxId_26;
	s32 sfxId_27;
	s32 sfxId_28;
	s32 sfxId_29;
	dummy8 pad1[24];
};
typedef struct _THROW_DIRECTION_SFX_PARAM_ST THROW_DIRECTION_SFX_PARAM_ST;

struct _THROW_INFO_BANK {
	s32 AtkChrId;
	s32 DefChrId;
	f32 Dist;
	f32 DiffAngMin;
	f32 DiffAngMax;
	f32 upperYRange;
	f32 lowerYRange;
	f32 diffAngMyToDef;
	s32 throwTypeId;
	s32 atkAnimId;
	s32 defAnimId;
	s16 escHp;
	s16 selfEscCycleTime;
	s16 sphereCastRadiusRateTop;
	s16 sphereCastRadiusRateLow;
	u8 PadType;
	u8 AtkEnableState;
	u8 throwFollowingType;
	dummy8 pad2[1];
	u8 throwType;
	u8 selfEscCycleCnt;
	u8 dmyHasChrDirType;
	u8 isTurnAtker: 1;
	u8 isSkipWepCate: 1;
	u8 isSkipSphereCast: 1;
	u8 isEnableCorrectPos_forThrowAdjust: 1;
	u8 isEnableThrowFollowingFallAssist: 1;
	u8 isEnableThrowFollowingFeedback: 1;
	dummy8 pad0: 2;
	s16 atkSorbDmyId;
	s16 defSorbDmyId;
	f32 Dist_start;
	f32 DiffAngMin_start;
	f32 DiffAngMax_start;
	f32 upperYRange_start;
	f32 lowerYRange_start;
	f32 diffAngMyToDef_start;
	s32 judgeRangeBasePosDmyId1;
	s32 judgeRangeBasePosDmyId2;
	dummy8 pad1[32];
};
typedef struct _THROW_INFO_BANK THROW_INFO_BANK;

struct _TOUGHNESS_PARAM_ST {
	f32 correctionRate;
	u16 minToughness;
	u8 isNonEffectiveCorrectionForMin;
	dummy8 pad2[1];
	s32 spEffectId;
	dummy8 pad1[20];
};
typedef struct _TOUGHNESS_PARAM_ST TOUGHNESS_PARAM_ST;

struct _UPPER_ARM_PARAM_ST {
	f32 ArmZ0;
	f32 ArmXY0;
	f32 ArmZ1;
	f32 ArmXY1;
	f32 ArmZ2;
	f32 ArmXY2;
	f32 ArmZ3;
	f32 ArmXY3;
	f32 ArmZ4;
	f32 ArmXY4;
	f32 ArmZ5;
	f32 ArmXY5;
	f32 ArmZ6;
	f32 ArmXY6;
	f32 ArmZ7;
	f32 ArmXY7;
	f32 ArmZ8;
	f32 ArmXY8;
	f32 ArmZ9;
	f32 ArmXY9;
	dummy8 pad1[48];
};
typedef struct _UPPER_ARM_PARAM_ST UPPER_ARM_PARAM_ST;

struct _WEAPON_GEN_PARAM_ST {
	s32 wepParamId;
	s32 gemSlotType_0;
	s32 gemGenId0;
	s32 gemSlotType_1;
	s32 gemGenId1;
	s32 gemSlotType_2;
	s32 gemGenId2;
	s32 gemSlotType_3;
	s32 gemGenId3;
	s32 gemSlotType_4;
	s32 gemGenId4;
};
typedef struct _WEAPON_GEN_PARAM_ST WEAPON_GEN_PARAM_ST;

struct _WEP_ABSORP_POS_PARAM_ST {
	u8 hangPosType;
	u8 isSkeletonBind;
	dummy8 pad0[2];
	s16 right_0;
	s16 left_0;
	s16 both_0;
	s16 leftHang_0;
	s16 rightHang_0;
	s16 right_1;
	s16 left_1;
	s16 both_1;
	s16 leftHang_1;
	s16 rightHang_1;
	s16 right_2;
	s16 left_2;
	s16 both_2;
	s16 leftHang_2;
	s16 rightHang_2;
	s16 right_3;
	s16 left_3;
	s16 both_3;
	s16 leftHang_3;
	s16 rightHang_3;
	u8 wepInvisibleType_0;
	u8 wepInvisibleType_1;
	u8 wepInvisibleType_2;
	u8 wepInvisibleType_3;
	s16 leftBoth_0;
	s16 leftBoth_1;
	s16 leftBoth_2;
	s16 leftBoth_3;
	u8 dispPosType_right_0;
	u8 dispPosType_left_0;
	u8 dispPosType_rightBoth_0;
	u8 dispPosType_leftBoth_0;
	u8 dispPosType_rightHang_0;
	u8 dispPosType_leftHang_0;
	u8 dispPosType_right_1;
	u8 dispPosType_left_1;
	u8 dispPosType_rightBoth_1;
	u8 dispPosType_leftBoth_1;
	u8 dispPosType_rightHang_1;
	u8 dispPosType_leftHang_1;
	u8 dispPosType_right_2;
	u8 dispPosType_left_2;
	u8 dispPosType_rightBoth_2;
	u8 dispPosType_leftBoth_2;
	u8 dispPosType_rightHang_2;
	u8 dispPosType_leftHang_2;
	u8 dispPosType_right_3;
	u8 dispPosType_left_3;
	u8 dispPosType_rightBoth_3;
	u8 dispPosType_leftBoth_3;
	u8 dispPosType_rightHang_3;
	u8 dispPosType_leftHang_3;
	dummy8 reserve[16];
};
typedef struct _WEP_ABSORP_POS_PARAM_ST WEP_ABSORP_POS_PARAM_ST;

struct _WET_ASPECT_PARAM_ST {
	u8 baseColorR;
	u8 baseColorG;
	u8 baseColorB;
	dummy8 reserve_0[1];
	f32 baseColorA;
	u8 metallic;
	dummy8 reserve_1[1];
	dummy8 reserve_2[1];
	dummy8 reserve_3[1];
	f32 metallicRate;
	f32 shininessRate;
	u8 shininess;
	dummy8 reserve_4[11];
};
typedef struct _WET_ASPECT_PARAM_ST WET_ASPECT_PARAM_ST;

struct _WHITE_SIGN_COOL_TIME_PARAM_ST {
	f32 timeLimit0;
	f32 timeLimit1;
	f32 timeLimit2;
	f32 timeLimit3;
};
typedef struct _WHITE_SIGN_COOL_TIME_PARAM_ST WHITE_SIGN_COOL_TIME_PARAM_ST;

struct _WIND_PARAM_ST {
	s16 commonCapsuleBeginDmyId;
	s16 commonCapsuleEndDmyId;
	f32 commonCapsuleRadius;
	dummy8 pad1[120];
	u8 sfxWindEnable: 1;
	u8 sfxIgnorePlayerSfx: 1;
	u8 sfxIsCollision: 1;
	dummy8 pad2[3];
	f32 SfxDirPitchMin;
	f32 SfxDirPitchMax;
	f32 SfxDirYawMin;
	f32 SfxDirYawMax;
	f32 SfxCycleMin;
	f32 SfxCycleMax;
	f32 SfxSpeedMin;
	f32 SfxSpeedMax;
	f32 SfxMaximumDrag;
	dummy8 pad3[88];
	u8 clothWindEnable: 1;
	u8 clothVertexWind: 1;
	dummy8 pad4[3];
	f32 clothDirPitchMin;
	f32 clothDirPitchMax;
	f32 clothDirYawMin;
	f32 clothDirYawMax;
	f32 clothCycleMin;
	f32 clothCycleMax;
	f32 clothSpeedMin;
	f32 clothSpeedMax;
	f32 clothMaximumDrag;
	dummy8 pad5[88];
};
typedef struct _WIND_PARAM_ST WIND_PARAM_ST;

typedef ACTIONBUTTON_PARAM_ST ActionButtonParam;
typedef AI_SOUND_PARAM_ST AiSoundParam;
typedef ATK_PARAM_ST AtkParam_Npc;
typedef ATK_PARAM_ST AtkParam_Pc;
typedef ATTACK_ELEMENT_CORRECT_PARAM_ST AttackElementCorrectParam;
typedef BEHAVIOR_PARAM_ST BehaviorParam;
typedef BEHAVIOR_PARAM_ST BehaviorParam_PC;
typedef BONFIRE_WARP_PARAM_ST BonfireWarpParam;
typedef BUDGET_PARAM_ST BudgetParam;
typedef BULLET_PARAM_ST Bullet;
typedef BULLET_CREATE_LIMIT_PARAM_ST BulletCreateLimitParam;
typedef CACL_CORRECT_GRAPH_ST CalcCorrectGraph;
typedef CEREMONY_PARAM_ST Ceremony;
typedef CHARACTER_LOAD_PARAM_ST CharacterLoadParam;
typedef CHARACTER_INIT_PARAM CharaInitParam;
typedef CHARMAKEMENU_LISTITEM_PARAM_ST CharMakeMenuListItemParam;
typedef CHARMAKEMENUTOP_PARAM_ST CharMakeMenuTopParam;
typedef CLEAR_COUNT_CORRECT_PARAM_ST ClearCountCorrectParam;
typedef COOL_TIME_PARAM_ST CoolTimeParam;
typedef CULT_SETTING_PARAM_ST CultSettingParam;
typedef DECAL_PARAM_ST DecalParam;
typedef DIRECTION_CAMERA_PARAM_ST DirectionCameraParam;
typedef EQUIP_MTRL_SET_PARAM_ST EquipMtrlSetParam;
typedef EQUIP_PARAM_ACCESSORY_ST EquipParamAccessory;
typedef EQUIP_PARAM_GOODS_ST EquipParamGoods;
typedef EQUIP_PARAM_PROTECTOR_ST EquipParamProtector;
typedef EQUIP_PARAM_WEAPON_ST EquipParamWeapon;
typedef FACE_GEN_PARAM_ST FaceGenParam;
typedef FACE_PARAM_ST FaceParam;
typedef FACE_RANGE_PARAM_ST FaceRangeParam;
typedef FOOT_SFX_PARAM_ST FootSfxParam;
typedef GAME_AREA_PARAM_ST GameAreaParam;
typedef GAME_PROGRESS_PARAM_ST GameProgressParam;
typedef GEM_CATEGORY_PARAM_ST GemCategoryParam;
typedef GEM_DROP_DOPING_PARAM_ST GemDropDopingParam;
typedef GEM_DROP_MODIFY_PARAM_ST GemDropModifyParam;
typedef GEMEFFECT_PARAM_ST GemeffectParam;
typedef GEM_GEN_PARAM_ST GemGenParam;
typedef HIT_EFFECT_SE_PARAM_ST HitEffectSeParam;
typedef HIT_EFFECT_SFX_CONCEPT_PARAM_ST HitEffectSfxConceptParam;
typedef HIT_EFFECT_SFX_PARAM_ST HitEffectSfxParam;
typedef HIT_MTRL_PARAM_ST HitMtrlParam;
typedef ESTUS_FLASK_RECOVERY_PARAM_ST HPEstusFlaskRecoveryParam;
typedef ITEMLOT_PARAM_ST ItemLotParam;
typedef KNOCKBACK_PARAM_ST KnockBackParam;
typedef KNOWLEDGE_LOADSCREEN_ITEM_PARAM_ST KnowledgeLoadScreenItemParam;
typedef LOAD_BALANCER_DRAW_DIST_SCALE_PARAM_ST LoadBalancerDrawDistScaleParam;
typedef LOAD_BALANCER_PARAM_ST LoadBalancerParam;
typedef LOCK_CAM_PARAM_ST LockCamParam;
typedef LOD_BANK LodParam;
typedef LOD_BANK LodParam_ps4;
typedef LOD_BANK LodParam_xb1;
typedef MAGIC_PARAM_ST Magic;
typedef MAP_MIMICRY_ESTABLISHMENT_PARAM_ST MapMimicryEstablishmentParam;
typedef MENU_OFFSCR_REND_PARAM_ST MenuOffscrRendParam;
typedef MENUPROPERTY_LAYOUT MenuPropertyLayoutParam;
typedef MENUPROPERTY_SPEC MenuPropertySpecParam;
typedef MENU_VALUE_TABLE_SPEC MenuValueTableParam;
typedef MODEL_SFX_PARAM_ST ModelSfxParam;
typedef MOVE_PARAM_ST MoveParam;
typedef ESTUS_FLASK_RECOVERY_PARAM_ST MPEstusFlaskRecoveryParam;
typedef MULTI_ESTUS_FLASK_BONUS_PARAM_ST MultiHPEstusFlaskBonusParam;
typedef MULTI_ESTUS_FLASK_BONUS_PARAM_ST MultiMPEstusFlaskBonusParam;
typedef MULTI_PLAY_CORRECTION_PARAM_ST MultiPlayCorrectionParam;
typedef MULTI_SOUL_BONUS_RATE_PARAM_ST MultiSoulBonusRateParam;
typedef NETWORK_AREA_PARAM_ST NetworkAreaParam;
typedef NETWORK_MSG_PARAM_ST NetworkMsgParam;
typedef NETWORK_PARAM_ST NetworkParam;
typedef MENU_PARAM_COLOR_TABLE_ST NewMenuColorTableParam;
typedef NPC_AI_ACTION_PARAM_ST NpcAiActionParam;
typedef NPC_PARAM_ST NpcParam;
typedef NPC_THINK_PARAM_ST NpcThinkParam;
typedef OBJ_ACT_PARAM_ST ObjActParam;
typedef OBJECT_MATERIAL_SFX_PARAM_ST ObjectMaterialSfxParam;
typedef OBJECT_PARAM_ST ObjectParam;
typedef PHANTOM_PARAM_ST PhantomParam;
typedef PLAY_REGION_PARAM_ST PlayRegionParam;
typedef PROTECTOR_GEN_PARAM_ST ProtectorGenParam;
typedef RAGDOLL_PARAM_ST RagdollParam;
typedef REINFORCE_PARAM_PROTECTOR_ST ReinforceParamProtector;
typedef REINFORCE_PARAM_WEAPON_ST ReinforceParamWeapon;
typedef ROLE_PARAM_ST RoleParam;
typedef SE_MATERIAL_CONVERT_PARAM_ST SeMaterialConvertParam;
typedef SHOP_LINEUP_PARAM ShopLineupParam;
typedef SKELETON_PARAM_ST SkeletonParam;
typedef SP_EFFECT_PARAM_ST SpEffectParam;
typedef SP_EFFECT_VFX_PARAM_ST SpEffectVfxParam;
typedef SWORD_ARTS_PARAM_ST SwordArtsParam;
typedef TALK_PARAM_ST TalkParam;
typedef THROW_DIRECTION_SFX_PARAM_ST ThrowDirectionSfxParam;
typedef THROW_INFO_BANK ThrowParam;
typedef TOUGHNESS_PARAM_ST ToughnessParam;
typedef UPPER_ARM_PARAM_ST UpperArmParam;
typedef WEAPON_GEN_PARAM_ST WeaponGenParam;
typedef WEP_ABSORP_POS_PARAM_ST WepAbsorpPosParam;
typedef WET_ASPECT_PARAM_ST WetAspectParam;
typedef WHITE_SIGN_COOL_TIME_PARAM_ST WhiteSignCoolTimeParam;
typedef WIND_PARAM_ST Wind;
#endif
